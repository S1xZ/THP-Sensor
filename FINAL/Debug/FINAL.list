
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003258  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080033f8  080033f8  000133f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003450  08003450  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003458  08003458  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003458  08003458  00013458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  080034d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080034d0  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095a1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000175d  00000000  00000000  00029641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0002ada0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002b470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d1a  00000000  00000000  0002bab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000893e  00000000  00000000  000407d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d46  00000000  00000000  00049110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cce56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e78  00000000  00000000  000cceac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080033e0 	.word	0x080033e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080033e0 	.word	0x080033e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_UART_RxCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <HAL_UART_RxCpltCallback+0x48>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d116      	bne.n	80005b6 <HAL_UART_RxCpltCallback+0x3e>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000588:	2120      	movs	r1, #32
 800058a:	480e      	ldr	r0, [pc, #56]	; (80005c4 <HAL_UART_RxCpltCallback+0x4c>)
 800058c:	f000 fe71 	bl	8001272 <HAL_GPIO_TogglePin>
		sprintf(buffer1,"pm2.5 %d\r\n",buffer[0]);
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <HAL_UART_RxCpltCallback+0x50>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	490d      	ldr	r1, [pc, #52]	; (80005cc <HAL_UART_RxCpltCallback+0x54>)
 8000598:	480d      	ldr	r0, [pc, #52]	; (80005d0 <HAL_UART_RxCpltCallback+0x58>)
 800059a:	f002 faf3 	bl	8002b84 <siprintf>
		HAL_UART_Transmit(&huart2, &buffer1, sizeof(buffer1), HAL_MAX_DELAY);
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	220a      	movs	r2, #10
 80005a4:	490a      	ldr	r1, [pc, #40]	; (80005d0 <HAL_UART_RxCpltCallback+0x58>)
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <HAL_UART_RxCpltCallback+0x5c>)
 80005a8:	f001 fb3f 	bl	8001c2a <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &buffer, sizeof(buffer));
 80005ac:	2201      	movs	r2, #1
 80005ae:	4906      	ldr	r1, [pc, #24]	; (80005c8 <HAL_UART_RxCpltCallback+0x50>)
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <HAL_UART_RxCpltCallback+0x48>)
 80005b2:	f001 fbcc 	bl	8001d4e <HAL_UART_Receive_IT>
	}
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000009c 	.word	0x2000009c
 80005c4:	40020000 	.word	0x40020000
 80005c8:	200000e0 	.word	0x200000e0
 80005cc:	080033f8 	.word	0x080033f8
 80005d0:	20000128 	.word	0x20000128
 80005d4:	200000e4 	.word	0x200000e4

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fa96 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f810 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f8cc 	bl	8000780 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f8a0 	bl	800072c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005ec:	f000 f874 	bl	80006d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &buffer, sizeof(buffer));
 80005f0:	2201      	movs	r2, #1
 80005f2:	4902      	ldr	r1, [pc, #8]	; (80005fc <main+0x24>)
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <main+0x28>)
 80005f6:	f001 fbaa 	bl	8001d4e <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <main+0x22>
 80005fc:	200000e0 	.word	0x200000e0
 8000600:	2000009c 	.word	0x2000009c

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f002 faae 	bl	8002b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a27      	ldr	r2, [pc, #156]	; (80006d0 <SystemClock_Config+0xcc>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClock_Config+0xd0>)
 800064e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000678:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067e:	2304      	movs	r3, #4
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000682:	2304      	movs	r3, #4
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fe0c 	bl	80012a8 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000696:	f000 f8e1 	bl	800085c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2102      	movs	r1, #2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f86e 	bl	8001798 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c2:	f000 f8cb 	bl	800085c <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_USART1_UART_Init+0x50>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 8000710:	f001 fa3e 	bl	8001b90 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800071a:	f000 f89f 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000009c 	.word	0x2000009c
 8000728:	40011000 	.word	0x40011000

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	; (800077c <MX_USART2_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000738:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000764:	f001 fa14 	bl	8001b90 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f875 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000e4 	.word	0x200000e4
 800077c:	40004400 	.word	0x40004400

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a2c      	ldr	r2, [pc, #176]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a25      	ldr	r2, [pc, #148]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b23      	ldr	r3, [pc, #140]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a1e      	ldr	r2, [pc, #120]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a17      	ldr	r2, [pc, #92]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2120      	movs	r1, #32
 800080a:	4812      	ldr	r0, [pc, #72]	; (8000854 <MX_GPIO_Init+0xd4>)
 800080c:	f000 fd18 	bl	8001240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000816:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <MX_GPIO_Init+0xd8>)
 8000828:	f000 fb86 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800082c:	2320      	movs	r3, #32
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_GPIO_Init+0xd4>)
 8000844:	f000 fb78 	bl	8000f38 <HAL_GPIO_Init>

}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40020000 	.word	0x40020000
 8000858:	40020800 	.word	0x40020800

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	e7fe      	b.n	8000864 <Error_Handler+0x8>
	...

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <HAL_MspInit+0x4c>)
 8000878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087c:	6453      	str	r3, [r2, #68]	; 0x44
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_MspInit+0x4c>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80008a6:	2006      	movs	r0, #6
 80008a8:	f000 fa72 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800

080008b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a36      	ldr	r2, [pc, #216]	; (80009b0 <HAL_UART_MspInit+0xf8>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d135      	bne.n	8000946 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <HAL_UART_MspInit+0xfc>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a34      	ldr	r2, [pc, #208]	; (80009b4 <HAL_UART_MspInit+0xfc>)
 80008e4:	f043 0310 	orr.w	r3, r3, #16
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <HAL_UART_MspInit+0xfc>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <HAL_UART_MspInit+0xfc>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a2d      	ldr	r2, [pc, #180]	; (80009b4 <HAL_UART_MspInit+0xfc>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <HAL_UART_MspInit+0xfc>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000912:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000920:	2303      	movs	r3, #3
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000924:	2307      	movs	r3, #7
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4822      	ldr	r0, [pc, #136]	; (80009b8 <HAL_UART_MspInit+0x100>)
 8000930:	f000 fb02 	bl	8000f38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2101      	movs	r1, #1
 8000938:	2025      	movs	r0, #37	; 0x25
 800093a:	f000 fa34 	bl	8000da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800093e:	2025      	movs	r0, #37	; 0x25
 8000940:	f000 fa4d 	bl	8000dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000944:	e030      	b.n	80009a8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a1c      	ldr	r2, [pc, #112]	; (80009bc <HAL_UART_MspInit+0x104>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d12b      	bne.n	80009a8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <HAL_UART_MspInit+0xfc>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <HAL_UART_MspInit+0xfc>)
 800095a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <HAL_UART_MspInit+0xfc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_UART_MspInit+0xfc>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <HAL_UART_MspInit+0xfc>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	6313      	str	r3, [r2, #48]	; 0x30
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <HAL_UART_MspInit+0xfc>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000988:	230c      	movs	r3, #12
 800098a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000998:	2307      	movs	r3, #7
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <HAL_UART_MspInit+0x100>)
 80009a4:	f000 fac8 	bl	8000f38 <HAL_GPIO_Init>
}
 80009a8:	bf00      	nop
 80009aa:	3730      	adds	r7, #48	; 0x30
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40011000 	.word	0x40011000
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40004400 	.word	0x40004400

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0c:	f000 f8d0 	bl	8000bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <USART1_IRQHandler+0x10>)
 8000a1a:	f001 f9c9 	bl	8001db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000009c 	.word	0x2000009c

08000a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a30:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <_sbrk+0x5c>)
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <_sbrk+0x60>)
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d102      	bne.n	8000a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <_sbrk+0x64>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <_sbrk+0x68>)
 8000a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d207      	bcs.n	8000a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a58:	f002 f862 	bl	8002b20 <__errno>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	220c      	movs	r2, #12
 8000a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	e009      	b.n	8000a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <_sbrk+0x64>)
 8000a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20020000 	.word	0x20020000
 8000a88:	00000400 	.word	0x00000400
 8000a8c:	2000008c 	.word	0x2000008c
 8000a90:	20000148 	.word	0x20000148

08000a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <SystemInit+0x20>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <SystemInit+0x20>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000abe:	490e      	ldr	r1, [pc, #56]	; (8000af8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac0:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad4:	4c0b      	ldr	r4, [pc, #44]	; (8000b04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ae2:	f7ff ffd7 	bl	8000a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f002 f821 	bl	8002b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aea:	f7ff fd75 	bl	80005d8 <main>
  bx  lr    
 8000aee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000afc:	08003460 	.word	0x08003460
  ldr r2, =_sbss
 8000b00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b04:	20000148 	.word	0x20000148

08000b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_Init+0x40>)
 8000b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_Init+0x40>)
 8000b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_Init+0x40>)
 8000b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f92b 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f000 f808 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff fe92 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023c00 	.word	0x40023c00

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x54>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x58>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f943 	bl	8000dfa <HAL_SYSTICK_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00e      	b.n	8000b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d80a      	bhi.n	8000b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f000 f90b 	bl	8000da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <HAL_InitTick+0x5c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000004 	.word	0x20000004

08000bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000134 	.word	0x20000134

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_GetTick+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000134 	.word	0x20000134

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <__NVIC_EnableIRQ+0x38>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d5c:	d301      	bcc.n	8000d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00f      	b.n	8000d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <SysTick_Config+0x40>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f7ff ff8e 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SysTick_Config+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Config+0x40>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff29 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff3e 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff8e 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5d 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff31 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffa2 	bl	8000d4c <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b084      	sub	sp, #16
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff feda 	bl	8000bd8 <HAL_GetTick>
 8000e24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d008      	beq.n	8000e44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e052      	b.n	8000eea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f022 0216 	bic.w	r2, r2, #22
 8000e52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	695a      	ldr	r2, [r3, #20]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d103      	bne.n	8000e74 <HAL_DMA_Abort+0x62>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d007      	beq.n	8000e84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0208 	bic.w	r2, r2, #8
 8000e82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0201 	bic.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e94:	e013      	b.n	8000ebe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e96:	f7ff fe9f 	bl	8000bd8 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b05      	cmp	r3, #5
 8000ea2:	d90c      	bls.n	8000ebe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2203      	movs	r2, #3
 8000eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e015      	b.n	8000eea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1e4      	bne.n	8000e96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed0:	223f      	movs	r2, #63	; 0x3f
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d004      	beq.n	8000f10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e00c      	b.n	8000f2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2205      	movs	r2, #5
 8000f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0201 	bic.w	r2, r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	e159      	b.n	8001208 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	f040 8148 	bne.w	8001202 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d005      	beq.n	8000f8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d130      	bne.n	8000fec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	f003 0201 	and.w	r2, r3, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d017      	beq.n	8001028 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d123      	bne.n	800107c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	08da      	lsrs	r2, r3, #3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3208      	adds	r2, #8
 800103c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	08da      	lsrs	r2, r3, #3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	69b9      	ldr	r1, [r7, #24]
 8001078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0203 	and.w	r2, r3, #3
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80a2 	beq.w	8001202 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b57      	ldr	r3, [pc, #348]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a56      	ldr	r2, [pc, #344]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b54      	ldr	r3, [pc, #336]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010da:	4a52      	ldr	r2, [pc, #328]	; (8001224 <HAL_GPIO_Init+0x2ec>)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a49      	ldr	r2, [pc, #292]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d019      	beq.n	800113a <HAL_GPIO_Init+0x202>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a48      	ldr	r2, [pc, #288]	; (800122c <HAL_GPIO_Init+0x2f4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d013      	beq.n	8001136 <HAL_GPIO_Init+0x1fe>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a47      	ldr	r2, [pc, #284]	; (8001230 <HAL_GPIO_Init+0x2f8>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d00d      	beq.n	8001132 <HAL_GPIO_Init+0x1fa>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a46      	ldr	r2, [pc, #280]	; (8001234 <HAL_GPIO_Init+0x2fc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d007      	beq.n	800112e <HAL_GPIO_Init+0x1f6>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a45      	ldr	r2, [pc, #276]	; (8001238 <HAL_GPIO_Init+0x300>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_GPIO_Init+0x1f2>
 8001126:	2304      	movs	r3, #4
 8001128:	e008      	b.n	800113c <HAL_GPIO_Init+0x204>
 800112a:	2307      	movs	r3, #7
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x204>
 800112e:	2303      	movs	r3, #3
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x204>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x204>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x204>
 800113a:	2300      	movs	r3, #0
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	f002 0203 	and.w	r2, r2, #3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4093      	lsls	r3, r2
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114c:	4935      	ldr	r1, [pc, #212]	; (8001224 <HAL_GPIO_Init+0x2ec>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115a:	4b38      	ldr	r3, [pc, #224]	; (800123c <HAL_GPIO_Init+0x304>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800117e:	4a2f      	ldr	r2, [pc, #188]	; (800123c <HAL_GPIO_Init+0x304>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <HAL_GPIO_Init+0x304>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a8:	4a24      	ldr	r2, [pc, #144]	; (800123c <HAL_GPIO_Init+0x304>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_GPIO_Init+0x304>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d2:	4a1a      	ldr	r2, [pc, #104]	; (800123c <HAL_GPIO_Init+0x304>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_GPIO_Init+0x304>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011fc:	4a0f      	ldr	r2, [pc, #60]	; (800123c <HAL_GPIO_Init+0x304>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	f67f aea2 	bls.w	8000f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40013800 	.word	0x40013800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400
 8001230:	40020800 	.word	0x40020800
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40021000 	.word	0x40021000
 800123c:	40013c00 	.word	0x40013c00

08001240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
 800124c:	4613      	mov	r3, r2
 800124e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800125c:	e003      	b.n	8001266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125e:	887b      	ldrh	r3, [r7, #2]
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	619a      	str	r2, [r3, #24]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001272:	b480      	push	{r7}
 8001274:	b085      	sub	sp, #20
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	460b      	mov	r3, r1
 800127c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001284:	887a      	ldrh	r2, [r7, #2]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4013      	ands	r3, r2
 800128a:	041a      	lsls	r2, r3, #16
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43d9      	mvns	r1, r3
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	400b      	ands	r3, r1
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	619a      	str	r2, [r3, #24]
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e264      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d075      	beq.n	80013b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c6:	4ba3      	ldr	r3, [pc, #652]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d00c      	beq.n	80012ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d2:	4ba0      	ldr	r3, [pc, #640]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d112      	bne.n	8001304 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012de:	4b9d      	ldr	r3, [pc, #628]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ea:	d10b      	bne.n	8001304 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	4b99      	ldr	r3, [pc, #612]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d05b      	beq.n	80013b0 <HAL_RCC_OscConfig+0x108>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d157      	bne.n	80013b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e23f      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800130c:	d106      	bne.n	800131c <HAL_RCC_OscConfig+0x74>
 800130e:	4b91      	ldr	r3, [pc, #580]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a90      	ldr	r2, [pc, #576]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e01d      	b.n	8001358 <HAL_RCC_OscConfig+0xb0>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0x98>
 8001326:	4b8b      	ldr	r3, [pc, #556]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a8a      	ldr	r2, [pc, #552]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b88      	ldr	r3, [pc, #544]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a87      	ldr	r2, [pc, #540]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0xb0>
 8001340:	4b84      	ldr	r3, [pc, #528]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a83      	ldr	r2, [pc, #524]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 8001346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b81      	ldr	r3, [pc, #516]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a80      	ldr	r2, [pc, #512]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fc3a 	bl	8000bd8 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fc36 	bl	8000bd8 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e204      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b76      	ldr	r3, [pc, #472]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0xc0>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fc26 	bl	8000bd8 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fc22 	bl	8000bd8 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	; 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e1f0      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	4b6c      	ldr	r3, [pc, #432]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0xe8>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d063      	beq.n	8001486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013be:	4b65      	ldr	r3, [pc, #404]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ca:	4b62      	ldr	r3, [pc, #392]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d11c      	bne.n	8001410 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d6:	4b5f      	ldr	r3, [pc, #380]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d116      	bne.n	8001410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	4b5c      	ldr	r3, [pc, #368]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x152>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e1c4      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	4b56      	ldr	r3, [pc, #344]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4952      	ldr	r1, [pc, #328]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	e03a      	b.n	8001486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001418:	4b4f      	ldr	r3, [pc, #316]	; (8001558 <HAL_RCC_OscConfig+0x2b0>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff fbdb 	bl	8000bd8 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fbd7 	bl	8000bd8 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e1a5      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	4b46      	ldr	r3, [pc, #280]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b43      	ldr	r3, [pc, #268]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4940      	ldr	r1, [pc, #256]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
 8001458:	e015      	b.n	8001486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145a:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <HAL_RCC_OscConfig+0x2b0>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fbba 	bl	8000bd8 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff fbb6 	bl	8000bd8 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e184      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	4b36      	ldr	r3, [pc, #216]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d030      	beq.n	80014f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d016      	beq.n	80014c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149a:	4b30      	ldr	r3, [pc, #192]	; (800155c <HAL_RCC_OscConfig+0x2b4>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a0:	f7ff fb9a 	bl	8000bd8 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fb96 	bl	8000bd8 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e164      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x200>
 80014c6:	e015      	b.n	80014f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_RCC_OscConfig+0x2b4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fb83 	bl	8000bd8 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fb7f 	bl	8000bd8 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e14d      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 80014ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80a0 	beq.w	8001642 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10f      	bne.n	8001532 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152e:	2301      	movs	r3, #1
 8001530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_OscConfig+0x2b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153a:	2b00      	cmp	r3, #0
 800153c:	d121      	bne.n	8001582 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_RCC_OscConfig+0x2b8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_RCC_OscConfig+0x2b8>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154a:	f7ff fb45 	bl	8000bd8 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	e011      	b.n	8001576 <HAL_RCC_OscConfig+0x2ce>
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	42470000 	.word	0x42470000
 800155c:	42470e80 	.word	0x42470e80
 8001560:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001564:	f7ff fb38 	bl	8000bd8 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e106      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001576:	4b85      	ldr	r3, [pc, #532]	; (800178c <HAL_RCC_OscConfig+0x4e4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d106      	bne.n	8001598 <HAL_RCC_OscConfig+0x2f0>
 800158a:	4b81      	ldr	r3, [pc, #516]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	4a80      	ldr	r2, [pc, #512]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6713      	str	r3, [r2, #112]	; 0x70
 8001596:	e01c      	b.n	80015d2 <HAL_RCC_OscConfig+0x32a>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b05      	cmp	r3, #5
 800159e:	d10c      	bne.n	80015ba <HAL_RCC_OscConfig+0x312>
 80015a0:	4b7b      	ldr	r3, [pc, #492]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	4a7a      	ldr	r2, [pc, #488]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6713      	str	r3, [r2, #112]	; 0x70
 80015ac:	4b78      	ldr	r3, [pc, #480]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b0:	4a77      	ldr	r2, [pc, #476]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6713      	str	r3, [r2, #112]	; 0x70
 80015b8:	e00b      	b.n	80015d2 <HAL_RCC_OscConfig+0x32a>
 80015ba:	4b75      	ldr	r3, [pc, #468]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	4a74      	ldr	r2, [pc, #464]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	6713      	str	r3, [r2, #112]	; 0x70
 80015c6:	4b72      	ldr	r3, [pc, #456]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	4a71      	ldr	r2, [pc, #452]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d015      	beq.n	8001606 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015da:	f7ff fafd 	bl	8000bd8 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e0:	e00a      	b.n	80015f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e2:	f7ff faf9 	bl	8000bd8 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e0c5      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f8:	4b65      	ldr	r3, [pc, #404]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 80015fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0ee      	beq.n	80015e2 <HAL_RCC_OscConfig+0x33a>
 8001604:	e014      	b.n	8001630 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001606:	f7ff fae7 	bl	8000bd8 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160c:	e00a      	b.n	8001624 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160e:	f7ff fae3 	bl	8000bd8 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	f241 3288 	movw	r2, #5000	; 0x1388
 800161c:	4293      	cmp	r3, r2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e0af      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001624:	4b5a      	ldr	r3, [pc, #360]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1ee      	bne.n	800160e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d105      	bne.n	8001642 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001636:	4b56      	ldr	r3, [pc, #344]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a55      	ldr	r2, [pc, #340]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 800163c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 809b 	beq.w	8001782 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800164c:	4b50      	ldr	r3, [pc, #320]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 030c 	and.w	r3, r3, #12
 8001654:	2b08      	cmp	r3, #8
 8001656:	d05c      	beq.n	8001712 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d141      	bne.n	80016e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001660:	4b4c      	ldr	r3, [pc, #304]	; (8001794 <HAL_RCC_OscConfig+0x4ec>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7ff fab7 	bl	8000bd8 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166e:	f7ff fab3 	bl	8000bd8 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e081      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001680:	4b43      	ldr	r3, [pc, #268]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f0      	bne.n	800166e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69da      	ldr	r2, [r3, #28]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	019b      	lsls	r3, r3, #6
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	085b      	lsrs	r3, r3, #1
 80016a4:	3b01      	subs	r3, #1
 80016a6:	041b      	lsls	r3, r3, #16
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	061b      	lsls	r3, r3, #24
 80016b0:	4937      	ldr	r1, [pc, #220]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <HAL_RCC_OscConfig+0x4ec>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fa8c 	bl	8000bd8 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff fa88 	bl	8000bd8 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e056      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d6:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x41c>
 80016e2:	e04e      	b.n	8001782 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_RCC_OscConfig+0x4ec>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7ff fa75 	bl	8000bd8 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f2:	f7ff fa71 	bl	8000bd8 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e03f      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x44a>
 8001710:	e037      	b.n	8001782 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e032      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <HAL_RCC_OscConfig+0x4e8>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d028      	beq.n	800177e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001736:	429a      	cmp	r2, r3
 8001738:	d121      	bne.n	800177e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001744:	429a      	cmp	r2, r3
 8001746:	d11a      	bne.n	800177e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800174e:	4013      	ands	r3, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001754:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001756:	4293      	cmp	r3, r2
 8001758:	d111      	bne.n	800177e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	085b      	lsrs	r3, r3, #1
 8001766:	3b01      	subs	r3, #1
 8001768:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d107      	bne.n	800177e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d001      	beq.n	8001782 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40007000 	.word	0x40007000
 8001790:	40023800 	.word	0x40023800
 8001794:	42470060 	.word	0x42470060

08001798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0cc      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ac:	4b68      	ldr	r3, [pc, #416]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d90c      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b65      	ldr	r3, [pc, #404]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b63      	ldr	r3, [pc, #396]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b8      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a58      	ldr	r2, [pc, #352]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a52      	ldr	r2, [pc, #328]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800180e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	494d      	ldr	r1, [pc, #308]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d044      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d119      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e07f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d003      	beq.n	8001856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	2b03      	cmp	r3, #3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e06f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e067      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 0203 	bic.w	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4934      	ldr	r1, [pc, #208]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001888:	f7ff f9a6 	bl	8000bd8 <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7ff f9a2 	bl	8000bd8 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e04f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 020c 	and.w	r2, r3, #12
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1eb      	bne.n	8001890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d20c      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e032      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4916      	ldr	r1, [pc, #88]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191e:	f000 f821 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 8001922:	4602      	mov	r2, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	490a      	ldr	r1, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	5ccb      	ldrb	r3, [r1, r3]
 8001932:	fa22 f303 	lsr.w	r3, r2, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f906 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00
 8001954:	40023800 	.word	0x40023800
 8001958:	08003404 	.word	0x08003404
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001964:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	2300      	movs	r3, #0
 8001976:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800197c:	4b67      	ldr	r3, [pc, #412]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d00d      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001988:	2b08      	cmp	r3, #8
 800198a:	f200 80bd 	bhi.w	8001b08 <HAL_RCC_GetSysClockFreq+0x1a4>
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x34>
 8001992:	2b04      	cmp	r3, #4
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0x3a>
 8001996:	e0b7      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001998:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800199a:	60bb      	str	r3, [r7, #8]
       break;
 800199c:	e0b7      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800199e:	4b61      	ldr	r3, [pc, #388]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80019a0:	60bb      	str	r3, [r7, #8]
      break;
 80019a2:	e0b4      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a4:	4b5d      	ldr	r3, [pc, #372]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ae:	4b5b      	ldr	r3, [pc, #364]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d04d      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ba:	4b58      	ldr	r3, [pc, #352]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	099b      	lsrs	r3, r3, #6
 80019c0:	461a      	mov	r2, r3
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019ca:	f04f 0100 	mov.w	r1, #0
 80019ce:	ea02 0800 	and.w	r8, r2, r0
 80019d2:	ea03 0901 	and.w	r9, r3, r1
 80019d6:	4640      	mov	r0, r8
 80019d8:	4649      	mov	r1, r9
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	014b      	lsls	r3, r1, #5
 80019e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019e8:	0142      	lsls	r2, r0, #5
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	ebb0 0008 	subs.w	r0, r0, r8
 80019f2:	eb61 0109 	sbc.w	r1, r1, r9
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	018b      	lsls	r3, r1, #6
 8001a00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a04:	0182      	lsls	r2, r0, #6
 8001a06:	1a12      	subs	r2, r2, r0
 8001a08:	eb63 0301 	sbc.w	r3, r3, r1
 8001a0c:	f04f 0000 	mov.w	r0, #0
 8001a10:	f04f 0100 	mov.w	r1, #0
 8001a14:	00d9      	lsls	r1, r3, #3
 8001a16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a1a:	00d0      	lsls	r0, r2, #3
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	eb12 0208 	adds.w	r2, r2, r8
 8001a24:	eb43 0309 	adc.w	r3, r3, r9
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	f04f 0100 	mov.w	r1, #0
 8001a30:	0259      	lsls	r1, r3, #9
 8001a32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a36:	0250      	lsls	r0, r2, #9
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	461a      	mov	r2, r3
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	f7fe fc1a 	bl	8000280 <__aeabi_uldivmod>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4613      	mov	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e04a      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a56:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	099b      	lsrs	r3, r3, #6
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a66:	f04f 0100 	mov.w	r1, #0
 8001a6a:	ea02 0400 	and.w	r4, r2, r0
 8001a6e:	ea03 0501 	and.w	r5, r3, r1
 8001a72:	4620      	mov	r0, r4
 8001a74:	4629      	mov	r1, r5
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	014b      	lsls	r3, r1, #5
 8001a80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a84:	0142      	lsls	r2, r0, #5
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	1b00      	subs	r0, r0, r4
 8001a8c:	eb61 0105 	sbc.w	r1, r1, r5
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	018b      	lsls	r3, r1, #6
 8001a9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a9e:	0182      	lsls	r2, r0, #6
 8001aa0:	1a12      	subs	r2, r2, r0
 8001aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	00d9      	lsls	r1, r3, #3
 8001ab0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ab4:	00d0      	lsls	r0, r2, #3
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	1912      	adds	r2, r2, r4
 8001abc:	eb45 0303 	adc.w	r3, r5, r3
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	0299      	lsls	r1, r3, #10
 8001aca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ace:	0290      	lsls	r0, r2, #10
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	461a      	mov	r2, r3
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	f7fe fbce 	bl	8000280 <__aeabi_uldivmod>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4613      	mov	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	0c1b      	lsrs	r3, r3, #16
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	3301      	adds	r3, #1
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b04:	60bb      	str	r3, [r7, #8]
      break;
 8001b06:	e002      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b0a:	60bb      	str	r3, [r7, #8]
      break;
 8001b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0e:	68bb      	ldr	r3, [r7, #8]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	00f42400 	.word	0x00f42400
 8001b24:	007a1200 	.word	0x007a1200

08001b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000000 	.word	0x20000000

08001b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b44:	f7ff fff0 	bl	8001b28 <HAL_RCC_GetHCLKFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	0a9b      	lsrs	r3, r3, #10
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	4903      	ldr	r1, [pc, #12]	; (8001b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	08003414 	.word	0x08003414

08001b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b6c:	f7ff ffdc 	bl	8001b28 <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0b5b      	lsrs	r3, r3, #13
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4903      	ldr	r1, [pc, #12]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	08003414 	.word	0x08003414

08001b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e03f      	b.n	8001c22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7fe fe7e 	bl	80008b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2224      	movs	r2, #36	; 0x24
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fddb 	bl	8002790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2220      	movs	r2, #32
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b08a      	sub	sp, #40	; 0x28
 8001c2e:	af02      	add	r7, sp, #8
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	4613      	mov	r3, r2
 8001c38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	d17c      	bne.n	8001d44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_UART_Transmit+0x2c>
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e075      	b.n	8001d46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_UART_Transmit+0x3e>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e06e      	b.n	8001d46 <HAL_UART_Transmit+0x11c>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2221      	movs	r2, #33	; 0x21
 8001c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c7e:	f7fe ffab 	bl	8000bd8 <HAL_GetTick>
 8001c82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	88fa      	ldrh	r2, [r7, #6]
 8001c88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	88fa      	ldrh	r2, [r7, #6]
 8001c8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c98:	d108      	bne.n	8001cac <HAL_UART_Transmit+0x82>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d104      	bne.n	8001cac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	e003      	b.n	8001cb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001cbc:	e02a      	b.n	8001d14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2180      	movs	r1, #128	; 0x80
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 fb1f 	bl	800230c <UART_WaitOnFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e036      	b.n	8001d46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	e007      	b.n	8001d06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	781a      	ldrb	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	3301      	adds	r3, #1
 8001d04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1cf      	bne.n	8001cbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2200      	movs	r2, #0
 8001d26:	2140      	movs	r1, #64	; 0x40
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 faef 	bl	800230c <UART_WaitOnFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e006      	b.n	8001d46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	e000      	b.n	8001d46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d44:	2302      	movs	r3, #2
  }
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3720      	adds	r7, #32
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b20      	cmp	r3, #32
 8001d66:	d11d      	bne.n	8001da4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <HAL_UART_Receive_IT+0x26>
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e016      	b.n	8001da6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_UART_Receive_IT+0x38>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e00f      	b.n	8001da6 <HAL_UART_Receive_IT+0x58>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	461a      	mov	r2, r3
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 fb24 	bl	80023e8 <UART_Start_Receive_IT>
 8001da0:	4603      	mov	r3, r0
 8001da2:	e000      	b.n	8001da6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
  }
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0ba      	sub	sp, #232	; 0xe8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10f      	bne.n	8001e16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_UART_IRQHandler+0x66>
 8001e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e06:	f003 0320 	and.w	r3, r3, #32
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fc03 	bl	800261a <UART_Receive_IT>
      return;
 8001e14:	e256      	b.n	80022c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80de 	beq.w	8001fdc <HAL_UART_IRQHandler+0x22c>
 8001e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d106      	bne.n	8001e3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80d1 	beq.w	8001fdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <HAL_UART_IRQHandler+0xae>
 8001e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00b      	beq.n	8001e82 <HAL_UART_IRQHandler+0xd2>
 8001e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f043 0202 	orr.w	r2, r3, #2
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_UART_IRQHandler+0xf6>
 8001e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f043 0204 	orr.w	r2, r3, #4
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d011      	beq.n	8001ed6 <HAL_UART_IRQHandler+0x126>
 8001eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001eb6:	f003 0320 	and.w	r3, r3, #32
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d105      	bne.n	8001eca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f043 0208 	orr.w	r2, r3, #8
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 81ed 	beq.w	80022ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_UART_IRQHandler+0x14e>
 8001eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ef0:	f003 0320 	and.w	r3, r3, #32
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fb8e 	bl	800261a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f08:	2b40      	cmp	r3, #64	; 0x40
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2301      	moveq	r3, #1
 8001f0e:	2300      	movne	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d103      	bne.n	8001f2a <HAL_UART_IRQHandler+0x17a>
 8001f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d04f      	beq.n	8001fca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fa96 	bl	800245c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3a:	2b40      	cmp	r3, #64	; 0x40
 8001f3c:	d141      	bne.n	8001fc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3314      	adds	r3, #20
 8001f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f4c:	e853 3f00 	ldrex	r3, [r3]
 8001f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	3314      	adds	r3, #20
 8001f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f7a:	e841 2300 	strex	r3, r2, [r1]
 8001f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1d9      	bne.n	8001f3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d013      	beq.n	8001fba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	4a7d      	ldr	r2, [pc, #500]	; (800218c <HAL_UART_IRQHandler+0x3dc>)
 8001f98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe ffa7 	bl	8000ef2 <HAL_DMA_Abort_IT>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d016      	beq.n	8001fd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb8:	e00e      	b.n	8001fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f990 	bl	80022e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc0:	e00a      	b.n	8001fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f98c 	bl	80022e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc8:	e006      	b.n	8001fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f988 	bl	80022e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001fd6:	e170      	b.n	80022ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd8:	bf00      	nop
    return;
 8001fda:	e16e      	b.n	80022ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	f040 814a 	bne.w	800227a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8143 	beq.w	800227a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 813c 	beq.w	800227a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002022:	2b40      	cmp	r3, #64	; 0x40
 8002024:	f040 80b4 	bne.w	8002190 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002034:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 8140 	beq.w	80022be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002046:	429a      	cmp	r2, r3
 8002048:	f080 8139 	bcs.w	80022be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002052:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800205e:	f000 8088 	beq.w	8002172 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	330c      	adds	r3, #12
 8002068:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800206c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002070:	e853 3f00 	ldrex	r3, [r3]
 8002074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002078:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800207c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002080:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	330c      	adds	r3, #12
 800208a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800208e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002092:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002096:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800209a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800209e:	e841 2300 	strex	r3, r2, [r1]
 80020a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80020a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1d9      	bne.n	8002062 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3314      	adds	r3, #20
 80020b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020b8:	e853 3f00 	ldrex	r3, [r3]
 80020bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80020be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3314      	adds	r3, #20
 80020ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80020d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80020da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80020de:	e841 2300 	strex	r3, r2, [r1]
 80020e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80020e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1e1      	bne.n	80020ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	3314      	adds	r3, #20
 80020f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020f4:	e853 3f00 	ldrex	r3, [r3]
 80020f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80020fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3314      	adds	r3, #20
 800210a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800210e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002110:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002112:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002114:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002116:	e841 2300 	strex	r3, r2, [r1]
 800211a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800211c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1e3      	bne.n	80020ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	330c      	adds	r3, #12
 8002136:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800213a:	e853 3f00 	ldrex	r3, [r3]
 800213e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002142:	f023 0310 	bic.w	r3, r3, #16
 8002146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	330c      	adds	r3, #12
 8002150:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002154:	65ba      	str	r2, [r7, #88]	; 0x58
 8002156:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002158:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800215a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800215c:	e841 2300 	strex	r3, r2, [r1]
 8002160:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1e3      	bne.n	8002130 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fe50 	bl	8000e12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800217a:	b29b      	uxth	r3, r3
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	b29b      	uxth	r3, r3
 8002180:	4619      	mov	r1, r3
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f8b6 	bl	80022f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002188:	e099      	b.n	80022be <HAL_UART_IRQHandler+0x50e>
 800218a:	bf00      	nop
 800218c:	08002523 	.word	0x08002523
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002198:	b29b      	uxth	r3, r3
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 808b 	beq.w	80022c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80021ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8086 	beq.w	80022c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	330c      	adds	r3, #12
 80021bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	e853 3f00 	ldrex	r3, [r3]
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80021c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80021cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	330c      	adds	r3, #12
 80021d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80021da:	647a      	str	r2, [r7, #68]	; 0x44
 80021dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021e2:	e841 2300 	strex	r3, r2, [r1]
 80021e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80021e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1e3      	bne.n	80021b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3314      	adds	r3, #20
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	e853 3f00 	ldrex	r3, [r3]
 80021fc:	623b      	str	r3, [r7, #32]
   return(result);
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3314      	adds	r3, #20
 800220e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002212:	633a      	str	r2, [r7, #48]	; 0x30
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800221a:	e841 2300 	strex	r3, r2, [r1]
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1e3      	bne.n	80021ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2220      	movs	r2, #32
 800222a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	330c      	adds	r3, #12
 800223a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	e853 3f00 	ldrex	r3, [r3]
 8002242:	60fb      	str	r3, [r7, #12]
   return(result);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0310 	bic.w	r3, r3, #16
 800224a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	330c      	adds	r3, #12
 8002254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002258:	61fa      	str	r2, [r7, #28]
 800225a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800225c:	69b9      	ldr	r1, [r7, #24]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	e841 2300 	strex	r3, r2, [r1]
 8002264:	617b      	str	r3, [r7, #20]
   return(result);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e3      	bne.n	8002234 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800226c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002270:	4619      	mov	r1, r3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f83e 	bl	80022f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002278:	e023      	b.n	80022c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800227a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800227e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_UART_IRQHandler+0x4ea>
 8002286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800228a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f959 	bl	800254a <UART_Transmit_IT>
    return;
 8002298:	e014      	b.n	80022c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800229a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800229e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00e      	beq.n	80022c4 <HAL_UART_IRQHandler+0x514>
 80022a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f999 	bl	80025ea <UART_EndTransmit_IT>
    return;
 80022b8:	e004      	b.n	80022c4 <HAL_UART_IRQHandler+0x514>
    return;
 80022ba:	bf00      	nop
 80022bc:	e002      	b.n	80022c4 <HAL_UART_IRQHandler+0x514>
      return;
 80022be:	bf00      	nop
 80022c0:	e000      	b.n	80022c4 <HAL_UART_IRQHandler+0x514>
      return;
 80022c2:	bf00      	nop
  }
}
 80022c4:	37e8      	adds	r7, #232	; 0xe8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop

080022cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b090      	sub	sp, #64	; 0x40
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800231c:	e050      	b.n	80023c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d04c      	beq.n	80023c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <UART_WaitOnFlagUntilTimeout+0x30>
 800232c:	f7fe fc54 	bl	8000bd8 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002338:	429a      	cmp	r2, r3
 800233a:	d241      	bcs.n	80023c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	330c      	adds	r3, #12
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002346:	e853 3f00 	ldrex	r3, [r3]
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	330c      	adds	r3, #12
 800235a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800235c:	637a      	str	r2, [r7, #52]	; 0x34
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002360:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002364:	e841 2300 	strex	r3, r2, [r1]
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1e5      	bne.n	800233c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3314      	adds	r3, #20
 8002376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	e853 3f00 	ldrex	r3, [r3]
 800237e:	613b      	str	r3, [r7, #16]
   return(result);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	63bb      	str	r3, [r7, #56]	; 0x38
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3314      	adds	r3, #20
 800238e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002390:	623a      	str	r2, [r7, #32]
 8002392:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002394:	69f9      	ldr	r1, [r7, #28]
 8002396:	6a3a      	ldr	r2, [r7, #32]
 8002398:	e841 2300 	strex	r3, r2, [r1]
 800239c:	61bb      	str	r3, [r7, #24]
   return(result);
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1e5      	bne.n	8002370 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e00f      	b.n	80023e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	4013      	ands	r3, r2
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	461a      	mov	r2, r3
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d09f      	beq.n	800231e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3740      	adds	r7, #64	; 0x40
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	4613      	mov	r3, r2
 80023f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	88fa      	ldrh	r2, [r7, #6]
 8002400:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	88fa      	ldrh	r2, [r7, #6]
 8002406:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2222      	movs	r2, #34	; 0x22
 8002412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800242c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0201 	orr.w	r2, r2, #1
 800243c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0220 	orr.w	r2, r2, #32
 800244c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800245c:	b480      	push	{r7}
 800245e:	b095      	sub	sp, #84	; 0x54
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	330c      	adds	r3, #12
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246e:	e853 3f00 	ldrex	r3, [r3]
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800247a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	330c      	adds	r3, #12
 8002482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002484:	643a      	str	r2, [r7, #64]	; 0x40
 8002486:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002488:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800248a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800248c:	e841 2300 	strex	r3, r2, [r1]
 8002490:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e5      	bne.n	8002464 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3314      	adds	r3, #20
 800249e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	e853 3f00 	ldrex	r3, [r3]
 80024a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f023 0301 	bic.w	r3, r3, #1
 80024ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3314      	adds	r3, #20
 80024b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c0:	e841 2300 	strex	r3, r2, [r1]
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e5      	bne.n	8002498 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d119      	bne.n	8002508 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	330c      	adds	r3, #12
 80024da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	e853 3f00 	ldrex	r3, [r3]
 80024e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f023 0310 	bic.w	r3, r3, #16
 80024ea:	647b      	str	r3, [r7, #68]	; 0x44
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	330c      	adds	r3, #12
 80024f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024f4:	61ba      	str	r2, [r7, #24]
 80024f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f8:	6979      	ldr	r1, [r7, #20]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	e841 2300 	strex	r3, r2, [r1]
 8002500:	613b      	str	r3, [r7, #16]
   return(result);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e5      	bne.n	80024d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002516:	bf00      	nop
 8002518:	3754      	adds	r7, #84	; 0x54
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff fecf 	bl	80022e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800254a:	b480      	push	{r7}
 800254c:	b085      	sub	sp, #20
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b21      	cmp	r3, #33	; 0x21
 800255c:	d13e      	bne.n	80025dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002566:	d114      	bne.n	8002592 <UART_Transmit_IT+0x48>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d110      	bne.n	8002592 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002584:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	1c9a      	adds	r2, r3, #2
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	621a      	str	r2, [r3, #32]
 8002590:	e008      	b.n	80025a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	1c59      	adds	r1, r3, #1
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6211      	str	r1, [r2, #32]
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4619      	mov	r1, r3
 80025b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10f      	bne.n	80025d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	e000      	b.n	80025de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
  }
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002600:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff fe5e 	bl	80022cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b08c      	sub	sp, #48	; 0x30
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b22      	cmp	r3, #34	; 0x22
 800262c:	f040 80ab 	bne.w	8002786 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002638:	d117      	bne.n	800266a <UART_Receive_IT+0x50>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d113      	bne.n	800266a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002642:	2300      	movs	r3, #0
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	b29b      	uxth	r3, r3
 8002654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002658:	b29a      	uxth	r2, r3
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	1c9a      	adds	r2, r3, #2
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28
 8002668:	e026      	b.n	80026b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002670:	2300      	movs	r3, #0
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800267c:	d007      	beq.n	800268e <UART_Receive_IT+0x74>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10a      	bne.n	800269c <UART_Receive_IT+0x82>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	e008      	b.n	80026ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4619      	mov	r1, r3
 80026c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d15a      	bne.n	8002782 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0220 	bic.w	r2, r2, #32
 80026da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	2b01      	cmp	r3, #1
 800270a:	d135      	bne.n	8002778 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	330c      	adds	r3, #12
 8002718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	e853 3f00 	ldrex	r3, [r3]
 8002720:	613b      	str	r3, [r7, #16]
   return(result);
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f023 0310 	bic.w	r3, r3, #16
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	330c      	adds	r3, #12
 8002730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002732:	623a      	str	r2, [r7, #32]
 8002734:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002736:	69f9      	ldr	r1, [r7, #28]
 8002738:	6a3a      	ldr	r2, [r7, #32]
 800273a:	e841 2300 	strex	r3, r2, [r1]
 800273e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1e5      	bne.n	8002712 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b10      	cmp	r3, #16
 8002752:	d10a      	bne.n	800276a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800276e:	4619      	mov	r1, r3
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff fdbf 	bl	80022f4 <HAL_UARTEx_RxEventCallback>
 8002776:	e002      	b.n	800277e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7fd fefd 	bl	8000578 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e002      	b.n	8002788 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e000      	b.n	8002788 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002786:	2302      	movs	r3, #2
  }
}
 8002788:	4618      	mov	r0, r3
 800278a:	3730      	adds	r7, #48	; 0x30
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002794:	b09f      	sub	sp, #124	; 0x7c
 8002796:	af00      	add	r7, sp, #0
 8002798:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800279a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a6:	68d9      	ldr	r1, [r3, #12]
 80027a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	ea40 0301 	orr.w	r3, r0, r1
 80027b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80027ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027d4:	f021 010c 	bic.w	r1, r1, #12
 80027d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027de:	430b      	orrs	r3, r1
 80027e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ee:	6999      	ldr	r1, [r3, #24]
 80027f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	ea40 0301 	orr.w	r3, r0, r1
 80027f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4bc5      	ldr	r3, [pc, #788]	; (8002b14 <UART_SetConfig+0x384>)
 8002800:	429a      	cmp	r2, r3
 8002802:	d004      	beq.n	800280e <UART_SetConfig+0x7e>
 8002804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4bc3      	ldr	r3, [pc, #780]	; (8002b18 <UART_SetConfig+0x388>)
 800280a:	429a      	cmp	r2, r3
 800280c:	d103      	bne.n	8002816 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800280e:	f7ff f9ab 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002812:	6778      	str	r0, [r7, #116]	; 0x74
 8002814:	e002      	b.n	800281c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002816:	f7ff f993 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 800281a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800281c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002824:	f040 80b6 	bne.w	8002994 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800282a:	461c      	mov	r4, r3
 800282c:	f04f 0500 	mov.w	r5, #0
 8002830:	4622      	mov	r2, r4
 8002832:	462b      	mov	r3, r5
 8002834:	1891      	adds	r1, r2, r2
 8002836:	6439      	str	r1, [r7, #64]	; 0x40
 8002838:	415b      	adcs	r3, r3
 800283a:	647b      	str	r3, [r7, #68]	; 0x44
 800283c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002840:	1912      	adds	r2, r2, r4
 8002842:	eb45 0303 	adc.w	r3, r5, r3
 8002846:	f04f 0000 	mov.w	r0, #0
 800284a:	f04f 0100 	mov.w	r1, #0
 800284e:	00d9      	lsls	r1, r3, #3
 8002850:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002854:	00d0      	lsls	r0, r2, #3
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	1911      	adds	r1, r2, r4
 800285c:	6639      	str	r1, [r7, #96]	; 0x60
 800285e:	416b      	adcs	r3, r5
 8002860:	667b      	str	r3, [r7, #100]	; 0x64
 8002862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	461a      	mov	r2, r3
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	1891      	adds	r1, r2, r2
 800286e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002870:	415b      	adcs	r3, r3
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002878:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800287c:	f7fd fd00 	bl	8000280 <__aeabi_uldivmod>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4ba5      	ldr	r3, [pc, #660]	; (8002b1c <UART_SetConfig+0x38c>)
 8002886:	fba3 2302 	umull	r2, r3, r3, r2
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	011e      	lsls	r6, r3, #4
 800288e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002890:	461c      	mov	r4, r3
 8002892:	f04f 0500 	mov.w	r5, #0
 8002896:	4622      	mov	r2, r4
 8002898:	462b      	mov	r3, r5
 800289a:	1891      	adds	r1, r2, r2
 800289c:	6339      	str	r1, [r7, #48]	; 0x30
 800289e:	415b      	adcs	r3, r3
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34
 80028a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80028a6:	1912      	adds	r2, r2, r4
 80028a8:	eb45 0303 	adc.w	r3, r5, r3
 80028ac:	f04f 0000 	mov.w	r0, #0
 80028b0:	f04f 0100 	mov.w	r1, #0
 80028b4:	00d9      	lsls	r1, r3, #3
 80028b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028ba:	00d0      	lsls	r0, r2, #3
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	1911      	adds	r1, r2, r4
 80028c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80028c4:	416b      	adcs	r3, r5
 80028c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	461a      	mov	r2, r3
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	1891      	adds	r1, r2, r2
 80028d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80028d6:	415b      	adcs	r3, r3
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80028e2:	f7fd fccd 	bl	8000280 <__aeabi_uldivmod>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4b8c      	ldr	r3, [pc, #560]	; (8002b1c <UART_SetConfig+0x38c>)
 80028ec:	fba3 1302 	umull	r1, r3, r3, r2
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	2164      	movs	r1, #100	; 0x64
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	3332      	adds	r3, #50	; 0x32
 80028fe:	4a87      	ldr	r2, [pc, #540]	; (8002b1c <UART_SetConfig+0x38c>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800290c:	441e      	add	r6, r3
 800290e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002910:	4618      	mov	r0, r3
 8002912:	f04f 0100 	mov.w	r1, #0
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	1894      	adds	r4, r2, r2
 800291c:	623c      	str	r4, [r7, #32]
 800291e:	415b      	adcs	r3, r3
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
 8002922:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002926:	1812      	adds	r2, r2, r0
 8002928:	eb41 0303 	adc.w	r3, r1, r3
 800292c:	f04f 0400 	mov.w	r4, #0
 8002930:	f04f 0500 	mov.w	r5, #0
 8002934:	00dd      	lsls	r5, r3, #3
 8002936:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800293a:	00d4      	lsls	r4, r2, #3
 800293c:	4622      	mov	r2, r4
 800293e:	462b      	mov	r3, r5
 8002940:	1814      	adds	r4, r2, r0
 8002942:	653c      	str	r4, [r7, #80]	; 0x50
 8002944:	414b      	adcs	r3, r1
 8002946:	657b      	str	r3, [r7, #84]	; 0x54
 8002948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	461a      	mov	r2, r3
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	1891      	adds	r1, r2, r2
 8002954:	61b9      	str	r1, [r7, #24]
 8002956:	415b      	adcs	r3, r3
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800295e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002962:	f7fd fc8d 	bl	8000280 <__aeabi_uldivmod>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4b6c      	ldr	r3, [pc, #432]	; (8002b1c <UART_SetConfig+0x38c>)
 800296c:	fba3 1302 	umull	r1, r3, r3, r2
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	2164      	movs	r1, #100	; 0x64
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	3332      	adds	r3, #50	; 0x32
 800297e:	4a67      	ldr	r2, [pc, #412]	; (8002b1c <UART_SetConfig+0x38c>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	f003 0207 	and.w	r2, r3, #7
 800298a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4432      	add	r2, r6
 8002990:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002992:	e0b9      	b.n	8002b08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002996:	461c      	mov	r4, r3
 8002998:	f04f 0500 	mov.w	r5, #0
 800299c:	4622      	mov	r2, r4
 800299e:	462b      	mov	r3, r5
 80029a0:	1891      	adds	r1, r2, r2
 80029a2:	6139      	str	r1, [r7, #16]
 80029a4:	415b      	adcs	r3, r3
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029ac:	1912      	adds	r2, r2, r4
 80029ae:	eb45 0303 	adc.w	r3, r5, r3
 80029b2:	f04f 0000 	mov.w	r0, #0
 80029b6:	f04f 0100 	mov.w	r1, #0
 80029ba:	00d9      	lsls	r1, r3, #3
 80029bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029c0:	00d0      	lsls	r0, r2, #3
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	eb12 0804 	adds.w	r8, r2, r4
 80029ca:	eb43 0905 	adc.w	r9, r3, r5
 80029ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f04f 0100 	mov.w	r1, #0
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	008b      	lsls	r3, r1, #2
 80029e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029e6:	0082      	lsls	r2, r0, #2
 80029e8:	4640      	mov	r0, r8
 80029ea:	4649      	mov	r1, r9
 80029ec:	f7fd fc48 	bl	8000280 <__aeabi_uldivmod>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4b49      	ldr	r3, [pc, #292]	; (8002b1c <UART_SetConfig+0x38c>)
 80029f6:	fba3 2302 	umull	r2, r3, r3, r2
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	011e      	lsls	r6, r3, #4
 80029fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a00:	4618      	mov	r0, r3
 8002a02:	f04f 0100 	mov.w	r1, #0
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	1894      	adds	r4, r2, r2
 8002a0c:	60bc      	str	r4, [r7, #8]
 8002a0e:	415b      	adcs	r3, r3
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a16:	1812      	adds	r2, r2, r0
 8002a18:	eb41 0303 	adc.w	r3, r1, r3
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f04f 0500 	mov.w	r5, #0
 8002a24:	00dd      	lsls	r5, r3, #3
 8002a26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a2a:	00d4      	lsls	r4, r2, #3
 8002a2c:	4622      	mov	r2, r4
 8002a2e:	462b      	mov	r3, r5
 8002a30:	1814      	adds	r4, r2, r0
 8002a32:	64bc      	str	r4, [r7, #72]	; 0x48
 8002a34:	414b      	adcs	r3, r1
 8002a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f04f 0100 	mov.w	r1, #0
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	008b      	lsls	r3, r1, #2
 8002a4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a50:	0082      	lsls	r2, r0, #2
 8002a52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002a56:	f7fd fc13 	bl	8000280 <__aeabi_uldivmod>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <UART_SetConfig+0x38c>)
 8002a60:	fba3 1302 	umull	r1, r3, r3, r2
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	2164      	movs	r1, #100	; 0x64
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	3332      	adds	r3, #50	; 0x32
 8002a72:	4a2a      	ldr	r2, [pc, #168]	; (8002b1c <UART_SetConfig+0x38c>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a7e:	441e      	add	r6, r3
 8002a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a82:	4618      	mov	r0, r3
 8002a84:	f04f 0100 	mov.w	r1, #0
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	1894      	adds	r4, r2, r2
 8002a8e:	603c      	str	r4, [r7, #0]
 8002a90:	415b      	adcs	r3, r3
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a98:	1812      	adds	r2, r2, r0
 8002a9a:	eb41 0303 	adc.w	r3, r1, r3
 8002a9e:	f04f 0400 	mov.w	r4, #0
 8002aa2:	f04f 0500 	mov.w	r5, #0
 8002aa6:	00dd      	lsls	r5, r3, #3
 8002aa8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002aac:	00d4      	lsls	r4, r2, #3
 8002aae:	4622      	mov	r2, r4
 8002ab0:	462b      	mov	r3, r5
 8002ab2:	eb12 0a00 	adds.w	sl, r2, r0
 8002ab6:	eb43 0b01 	adc.w	fp, r3, r1
 8002aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	008b      	lsls	r3, r1, #2
 8002ace:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ad2:	0082      	lsls	r2, r0, #2
 8002ad4:	4650      	mov	r0, sl
 8002ad6:	4659      	mov	r1, fp
 8002ad8:	f7fd fbd2 	bl	8000280 <__aeabi_uldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <UART_SetConfig+0x38c>)
 8002ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	2164      	movs	r1, #100	; 0x64
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	3332      	adds	r3, #50	; 0x32
 8002af4:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <UART_SetConfig+0x38c>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	f003 020f 	and.w	r2, r3, #15
 8002b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4432      	add	r2, r6
 8002b06:	609a      	str	r2, [r3, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	377c      	adds	r7, #124	; 0x7c
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b12:	bf00      	nop
 8002b14:	40011000 	.word	0x40011000
 8002b18:	40011400 	.word	0x40011400
 8002b1c:	51eb851f 	.word	0x51eb851f

08002b20 <__errno>:
 8002b20:	4b01      	ldr	r3, [pc, #4]	; (8002b28 <__errno+0x8>)
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	2000000c 	.word	0x2000000c

08002b2c <__libc_init_array>:
 8002b2c:	b570      	push	{r4, r5, r6, lr}
 8002b2e:	4d0d      	ldr	r5, [pc, #52]	; (8002b64 <__libc_init_array+0x38>)
 8002b30:	4c0d      	ldr	r4, [pc, #52]	; (8002b68 <__libc_init_array+0x3c>)
 8002b32:	1b64      	subs	r4, r4, r5
 8002b34:	10a4      	asrs	r4, r4, #2
 8002b36:	2600      	movs	r6, #0
 8002b38:	42a6      	cmp	r6, r4
 8002b3a:	d109      	bne.n	8002b50 <__libc_init_array+0x24>
 8002b3c:	4d0b      	ldr	r5, [pc, #44]	; (8002b6c <__libc_init_array+0x40>)
 8002b3e:	4c0c      	ldr	r4, [pc, #48]	; (8002b70 <__libc_init_array+0x44>)
 8002b40:	f000 fc4e 	bl	80033e0 <_init>
 8002b44:	1b64      	subs	r4, r4, r5
 8002b46:	10a4      	asrs	r4, r4, #2
 8002b48:	2600      	movs	r6, #0
 8002b4a:	42a6      	cmp	r6, r4
 8002b4c:	d105      	bne.n	8002b5a <__libc_init_array+0x2e>
 8002b4e:	bd70      	pop	{r4, r5, r6, pc}
 8002b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b54:	4798      	blx	r3
 8002b56:	3601      	adds	r6, #1
 8002b58:	e7ee      	b.n	8002b38 <__libc_init_array+0xc>
 8002b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b5e:	4798      	blx	r3
 8002b60:	3601      	adds	r6, #1
 8002b62:	e7f2      	b.n	8002b4a <__libc_init_array+0x1e>
 8002b64:	08003458 	.word	0x08003458
 8002b68:	08003458 	.word	0x08003458
 8002b6c:	08003458 	.word	0x08003458
 8002b70:	0800345c 	.word	0x0800345c

08002b74 <memset>:
 8002b74:	4402      	add	r2, r0
 8002b76:	4603      	mov	r3, r0
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d100      	bne.n	8002b7e <memset+0xa>
 8002b7c:	4770      	bx	lr
 8002b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b82:	e7f9      	b.n	8002b78 <memset+0x4>

08002b84 <siprintf>:
 8002b84:	b40e      	push	{r1, r2, r3}
 8002b86:	b500      	push	{lr}
 8002b88:	b09c      	sub	sp, #112	; 0x70
 8002b8a:	ab1d      	add	r3, sp, #116	; 0x74
 8002b8c:	9002      	str	r0, [sp, #8]
 8002b8e:	9006      	str	r0, [sp, #24]
 8002b90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b94:	4809      	ldr	r0, [pc, #36]	; (8002bbc <siprintf+0x38>)
 8002b96:	9107      	str	r1, [sp, #28]
 8002b98:	9104      	str	r1, [sp, #16]
 8002b9a:	4909      	ldr	r1, [pc, #36]	; (8002bc0 <siprintf+0x3c>)
 8002b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ba0:	9105      	str	r1, [sp, #20]
 8002ba2:	6800      	ldr	r0, [r0, #0]
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	a902      	add	r1, sp, #8
 8002ba8:	f000 f868 	bl	8002c7c <_svfiprintf_r>
 8002bac:	9b02      	ldr	r3, [sp, #8]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	b01c      	add	sp, #112	; 0x70
 8002bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bb8:	b003      	add	sp, #12
 8002bba:	4770      	bx	lr
 8002bbc:	2000000c 	.word	0x2000000c
 8002bc0:	ffff0208 	.word	0xffff0208

08002bc4 <__ssputs_r>:
 8002bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bc8:	688e      	ldr	r6, [r1, #8]
 8002bca:	429e      	cmp	r6, r3
 8002bcc:	4682      	mov	sl, r0
 8002bce:	460c      	mov	r4, r1
 8002bd0:	4690      	mov	r8, r2
 8002bd2:	461f      	mov	r7, r3
 8002bd4:	d838      	bhi.n	8002c48 <__ssputs_r+0x84>
 8002bd6:	898a      	ldrh	r2, [r1, #12]
 8002bd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bdc:	d032      	beq.n	8002c44 <__ssputs_r+0x80>
 8002bde:	6825      	ldr	r5, [r4, #0]
 8002be0:	6909      	ldr	r1, [r1, #16]
 8002be2:	eba5 0901 	sub.w	r9, r5, r1
 8002be6:	6965      	ldr	r5, [r4, #20]
 8002be8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	444b      	add	r3, r9
 8002bf4:	106d      	asrs	r5, r5, #1
 8002bf6:	429d      	cmp	r5, r3
 8002bf8:	bf38      	it	cc
 8002bfa:	461d      	movcc	r5, r3
 8002bfc:	0553      	lsls	r3, r2, #21
 8002bfe:	d531      	bpl.n	8002c64 <__ssputs_r+0xa0>
 8002c00:	4629      	mov	r1, r5
 8002c02:	f000 fb47 	bl	8003294 <_malloc_r>
 8002c06:	4606      	mov	r6, r0
 8002c08:	b950      	cbnz	r0, 8002c20 <__ssputs_r+0x5c>
 8002c0a:	230c      	movs	r3, #12
 8002c0c:	f8ca 3000 	str.w	r3, [sl]
 8002c10:	89a3      	ldrh	r3, [r4, #12]
 8002c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c16:	81a3      	strh	r3, [r4, #12]
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c20:	6921      	ldr	r1, [r4, #16]
 8002c22:	464a      	mov	r2, r9
 8002c24:	f000 fabe 	bl	80031a4 <memcpy>
 8002c28:	89a3      	ldrh	r3, [r4, #12]
 8002c2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c32:	81a3      	strh	r3, [r4, #12]
 8002c34:	6126      	str	r6, [r4, #16]
 8002c36:	6165      	str	r5, [r4, #20]
 8002c38:	444e      	add	r6, r9
 8002c3a:	eba5 0509 	sub.w	r5, r5, r9
 8002c3e:	6026      	str	r6, [r4, #0]
 8002c40:	60a5      	str	r5, [r4, #8]
 8002c42:	463e      	mov	r6, r7
 8002c44:	42be      	cmp	r6, r7
 8002c46:	d900      	bls.n	8002c4a <__ssputs_r+0x86>
 8002c48:	463e      	mov	r6, r7
 8002c4a:	4632      	mov	r2, r6
 8002c4c:	6820      	ldr	r0, [r4, #0]
 8002c4e:	4641      	mov	r1, r8
 8002c50:	f000 fab6 	bl	80031c0 <memmove>
 8002c54:	68a3      	ldr	r3, [r4, #8]
 8002c56:	6822      	ldr	r2, [r4, #0]
 8002c58:	1b9b      	subs	r3, r3, r6
 8002c5a:	4432      	add	r2, r6
 8002c5c:	60a3      	str	r3, [r4, #8]
 8002c5e:	6022      	str	r2, [r4, #0]
 8002c60:	2000      	movs	r0, #0
 8002c62:	e7db      	b.n	8002c1c <__ssputs_r+0x58>
 8002c64:	462a      	mov	r2, r5
 8002c66:	f000 fb6f 	bl	8003348 <_realloc_r>
 8002c6a:	4606      	mov	r6, r0
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d1e1      	bne.n	8002c34 <__ssputs_r+0x70>
 8002c70:	6921      	ldr	r1, [r4, #16]
 8002c72:	4650      	mov	r0, sl
 8002c74:	f000 fabe 	bl	80031f4 <_free_r>
 8002c78:	e7c7      	b.n	8002c0a <__ssputs_r+0x46>
	...

08002c7c <_svfiprintf_r>:
 8002c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c80:	4698      	mov	r8, r3
 8002c82:	898b      	ldrh	r3, [r1, #12]
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	b09d      	sub	sp, #116	; 0x74
 8002c88:	4607      	mov	r7, r0
 8002c8a:	460d      	mov	r5, r1
 8002c8c:	4614      	mov	r4, r2
 8002c8e:	d50e      	bpl.n	8002cae <_svfiprintf_r+0x32>
 8002c90:	690b      	ldr	r3, [r1, #16]
 8002c92:	b963      	cbnz	r3, 8002cae <_svfiprintf_r+0x32>
 8002c94:	2140      	movs	r1, #64	; 0x40
 8002c96:	f000 fafd 	bl	8003294 <_malloc_r>
 8002c9a:	6028      	str	r0, [r5, #0]
 8002c9c:	6128      	str	r0, [r5, #16]
 8002c9e:	b920      	cbnz	r0, 8002caa <_svfiprintf_r+0x2e>
 8002ca0:	230c      	movs	r3, #12
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca8:	e0d1      	b.n	8002e4e <_svfiprintf_r+0x1d2>
 8002caa:	2340      	movs	r3, #64	; 0x40
 8002cac:	616b      	str	r3, [r5, #20]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cbc:	2330      	movs	r3, #48	; 0x30
 8002cbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002e68 <_svfiprintf_r+0x1ec>
 8002cc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cc6:	f04f 0901 	mov.w	r9, #1
 8002cca:	4623      	mov	r3, r4
 8002ccc:	469a      	mov	sl, r3
 8002cce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cd2:	b10a      	cbz	r2, 8002cd8 <_svfiprintf_r+0x5c>
 8002cd4:	2a25      	cmp	r2, #37	; 0x25
 8002cd6:	d1f9      	bne.n	8002ccc <_svfiprintf_r+0x50>
 8002cd8:	ebba 0b04 	subs.w	fp, sl, r4
 8002cdc:	d00b      	beq.n	8002cf6 <_svfiprintf_r+0x7a>
 8002cde:	465b      	mov	r3, fp
 8002ce0:	4622      	mov	r2, r4
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	4638      	mov	r0, r7
 8002ce6:	f7ff ff6d 	bl	8002bc4 <__ssputs_r>
 8002cea:	3001      	adds	r0, #1
 8002cec:	f000 80aa 	beq.w	8002e44 <_svfiprintf_r+0x1c8>
 8002cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cf2:	445a      	add	r2, fp
 8002cf4:	9209      	str	r2, [sp, #36]	; 0x24
 8002cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80a2 	beq.w	8002e44 <_svfiprintf_r+0x1c8>
 8002d00:	2300      	movs	r3, #0
 8002d02:	f04f 32ff 	mov.w	r2, #4294967295
 8002d06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d0a:	f10a 0a01 	add.w	sl, sl, #1
 8002d0e:	9304      	str	r3, [sp, #16]
 8002d10:	9307      	str	r3, [sp, #28]
 8002d12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d16:	931a      	str	r3, [sp, #104]	; 0x68
 8002d18:	4654      	mov	r4, sl
 8002d1a:	2205      	movs	r2, #5
 8002d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d20:	4851      	ldr	r0, [pc, #324]	; (8002e68 <_svfiprintf_r+0x1ec>)
 8002d22:	f7fd fa5d 	bl	80001e0 <memchr>
 8002d26:	9a04      	ldr	r2, [sp, #16]
 8002d28:	b9d8      	cbnz	r0, 8002d62 <_svfiprintf_r+0xe6>
 8002d2a:	06d0      	lsls	r0, r2, #27
 8002d2c:	bf44      	itt	mi
 8002d2e:	2320      	movmi	r3, #32
 8002d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d34:	0711      	lsls	r1, r2, #28
 8002d36:	bf44      	itt	mi
 8002d38:	232b      	movmi	r3, #43	; 0x2b
 8002d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d42:	2b2a      	cmp	r3, #42	; 0x2a
 8002d44:	d015      	beq.n	8002d72 <_svfiprintf_r+0xf6>
 8002d46:	9a07      	ldr	r2, [sp, #28]
 8002d48:	4654      	mov	r4, sl
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f04f 0c0a 	mov.w	ip, #10
 8002d50:	4621      	mov	r1, r4
 8002d52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d56:	3b30      	subs	r3, #48	; 0x30
 8002d58:	2b09      	cmp	r3, #9
 8002d5a:	d94e      	bls.n	8002dfa <_svfiprintf_r+0x17e>
 8002d5c:	b1b0      	cbz	r0, 8002d8c <_svfiprintf_r+0x110>
 8002d5e:	9207      	str	r2, [sp, #28]
 8002d60:	e014      	b.n	8002d8c <_svfiprintf_r+0x110>
 8002d62:	eba0 0308 	sub.w	r3, r0, r8
 8002d66:	fa09 f303 	lsl.w	r3, r9, r3
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	9304      	str	r3, [sp, #16]
 8002d6e:	46a2      	mov	sl, r4
 8002d70:	e7d2      	b.n	8002d18 <_svfiprintf_r+0x9c>
 8002d72:	9b03      	ldr	r3, [sp, #12]
 8002d74:	1d19      	adds	r1, r3, #4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	9103      	str	r1, [sp, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bfbb      	ittet	lt
 8002d7e:	425b      	neglt	r3, r3
 8002d80:	f042 0202 	orrlt.w	r2, r2, #2
 8002d84:	9307      	strge	r3, [sp, #28]
 8002d86:	9307      	strlt	r3, [sp, #28]
 8002d88:	bfb8      	it	lt
 8002d8a:	9204      	strlt	r2, [sp, #16]
 8002d8c:	7823      	ldrb	r3, [r4, #0]
 8002d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8002d90:	d10c      	bne.n	8002dac <_svfiprintf_r+0x130>
 8002d92:	7863      	ldrb	r3, [r4, #1]
 8002d94:	2b2a      	cmp	r3, #42	; 0x2a
 8002d96:	d135      	bne.n	8002e04 <_svfiprintf_r+0x188>
 8002d98:	9b03      	ldr	r3, [sp, #12]
 8002d9a:	1d1a      	adds	r2, r3, #4
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	9203      	str	r2, [sp, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bfb8      	it	lt
 8002da4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002da8:	3402      	adds	r4, #2
 8002daa:	9305      	str	r3, [sp, #20]
 8002dac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002e78 <_svfiprintf_r+0x1fc>
 8002db0:	7821      	ldrb	r1, [r4, #0]
 8002db2:	2203      	movs	r2, #3
 8002db4:	4650      	mov	r0, sl
 8002db6:	f7fd fa13 	bl	80001e0 <memchr>
 8002dba:	b140      	cbz	r0, 8002dce <_svfiprintf_r+0x152>
 8002dbc:	2340      	movs	r3, #64	; 0x40
 8002dbe:	eba0 000a 	sub.w	r0, r0, sl
 8002dc2:	fa03 f000 	lsl.w	r0, r3, r0
 8002dc6:	9b04      	ldr	r3, [sp, #16]
 8002dc8:	4303      	orrs	r3, r0
 8002dca:	3401      	adds	r4, #1
 8002dcc:	9304      	str	r3, [sp, #16]
 8002dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dd2:	4826      	ldr	r0, [pc, #152]	; (8002e6c <_svfiprintf_r+0x1f0>)
 8002dd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dd8:	2206      	movs	r2, #6
 8002dda:	f7fd fa01 	bl	80001e0 <memchr>
 8002dde:	2800      	cmp	r0, #0
 8002de0:	d038      	beq.n	8002e54 <_svfiprintf_r+0x1d8>
 8002de2:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <_svfiprintf_r+0x1f4>)
 8002de4:	bb1b      	cbnz	r3, 8002e2e <_svfiprintf_r+0x1b2>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	3307      	adds	r3, #7
 8002dea:	f023 0307 	bic.w	r3, r3, #7
 8002dee:	3308      	adds	r3, #8
 8002df0:	9303      	str	r3, [sp, #12]
 8002df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002df4:	4433      	add	r3, r6
 8002df6:	9309      	str	r3, [sp, #36]	; 0x24
 8002df8:	e767      	b.n	8002cca <_svfiprintf_r+0x4e>
 8002dfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dfe:	460c      	mov	r4, r1
 8002e00:	2001      	movs	r0, #1
 8002e02:	e7a5      	b.n	8002d50 <_svfiprintf_r+0xd4>
 8002e04:	2300      	movs	r3, #0
 8002e06:	3401      	adds	r4, #1
 8002e08:	9305      	str	r3, [sp, #20]
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f04f 0c0a 	mov.w	ip, #10
 8002e10:	4620      	mov	r0, r4
 8002e12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e16:	3a30      	subs	r2, #48	; 0x30
 8002e18:	2a09      	cmp	r2, #9
 8002e1a:	d903      	bls.n	8002e24 <_svfiprintf_r+0x1a8>
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0c5      	beq.n	8002dac <_svfiprintf_r+0x130>
 8002e20:	9105      	str	r1, [sp, #20]
 8002e22:	e7c3      	b.n	8002dac <_svfiprintf_r+0x130>
 8002e24:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e28:	4604      	mov	r4, r0
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e7f0      	b.n	8002e10 <_svfiprintf_r+0x194>
 8002e2e:	ab03      	add	r3, sp, #12
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	462a      	mov	r2, r5
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <_svfiprintf_r+0x1f8>)
 8002e36:	a904      	add	r1, sp, #16
 8002e38:	4638      	mov	r0, r7
 8002e3a:	f3af 8000 	nop.w
 8002e3e:	1c42      	adds	r2, r0, #1
 8002e40:	4606      	mov	r6, r0
 8002e42:	d1d6      	bne.n	8002df2 <_svfiprintf_r+0x176>
 8002e44:	89ab      	ldrh	r3, [r5, #12]
 8002e46:	065b      	lsls	r3, r3, #25
 8002e48:	f53f af2c 	bmi.w	8002ca4 <_svfiprintf_r+0x28>
 8002e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e4e:	b01d      	add	sp, #116	; 0x74
 8002e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e54:	ab03      	add	r3, sp, #12
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	462a      	mov	r2, r5
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <_svfiprintf_r+0x1f8>)
 8002e5c:	a904      	add	r1, sp, #16
 8002e5e:	4638      	mov	r0, r7
 8002e60:	f000 f87a 	bl	8002f58 <_printf_i>
 8002e64:	e7eb      	b.n	8002e3e <_svfiprintf_r+0x1c2>
 8002e66:	bf00      	nop
 8002e68:	0800341c 	.word	0x0800341c
 8002e6c:	08003426 	.word	0x08003426
 8002e70:	00000000 	.word	0x00000000
 8002e74:	08002bc5 	.word	0x08002bc5
 8002e78:	08003422 	.word	0x08003422

08002e7c <_printf_common>:
 8002e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e80:	4616      	mov	r6, r2
 8002e82:	4699      	mov	r9, r3
 8002e84:	688a      	ldr	r2, [r1, #8]
 8002e86:	690b      	ldr	r3, [r1, #16]
 8002e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	bfb8      	it	lt
 8002e90:	4613      	movlt	r3, r2
 8002e92:	6033      	str	r3, [r6, #0]
 8002e94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e98:	4607      	mov	r7, r0
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	b10a      	cbz	r2, 8002ea2 <_printf_common+0x26>
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	6033      	str	r3, [r6, #0]
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	0699      	lsls	r1, r3, #26
 8002ea6:	bf42      	ittt	mi
 8002ea8:	6833      	ldrmi	r3, [r6, #0]
 8002eaa:	3302      	addmi	r3, #2
 8002eac:	6033      	strmi	r3, [r6, #0]
 8002eae:	6825      	ldr	r5, [r4, #0]
 8002eb0:	f015 0506 	ands.w	r5, r5, #6
 8002eb4:	d106      	bne.n	8002ec4 <_printf_common+0x48>
 8002eb6:	f104 0a19 	add.w	sl, r4, #25
 8002eba:	68e3      	ldr	r3, [r4, #12]
 8002ebc:	6832      	ldr	r2, [r6, #0]
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	42ab      	cmp	r3, r5
 8002ec2:	dc26      	bgt.n	8002f12 <_printf_common+0x96>
 8002ec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ec8:	1e13      	subs	r3, r2, #0
 8002eca:	6822      	ldr	r2, [r4, #0]
 8002ecc:	bf18      	it	ne
 8002ece:	2301      	movne	r3, #1
 8002ed0:	0692      	lsls	r2, r2, #26
 8002ed2:	d42b      	bmi.n	8002f2c <_printf_common+0xb0>
 8002ed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ed8:	4649      	mov	r1, r9
 8002eda:	4638      	mov	r0, r7
 8002edc:	47c0      	blx	r8
 8002ede:	3001      	adds	r0, #1
 8002ee0:	d01e      	beq.n	8002f20 <_printf_common+0xa4>
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	68e5      	ldr	r5, [r4, #12]
 8002ee6:	6832      	ldr	r2, [r6, #0]
 8002ee8:	f003 0306 	and.w	r3, r3, #6
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	bf08      	it	eq
 8002ef0:	1aad      	subeq	r5, r5, r2
 8002ef2:	68a3      	ldr	r3, [r4, #8]
 8002ef4:	6922      	ldr	r2, [r4, #16]
 8002ef6:	bf0c      	ite	eq
 8002ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002efc:	2500      	movne	r5, #0
 8002efe:	4293      	cmp	r3, r2
 8002f00:	bfc4      	itt	gt
 8002f02:	1a9b      	subgt	r3, r3, r2
 8002f04:	18ed      	addgt	r5, r5, r3
 8002f06:	2600      	movs	r6, #0
 8002f08:	341a      	adds	r4, #26
 8002f0a:	42b5      	cmp	r5, r6
 8002f0c:	d11a      	bne.n	8002f44 <_printf_common+0xc8>
 8002f0e:	2000      	movs	r0, #0
 8002f10:	e008      	b.n	8002f24 <_printf_common+0xa8>
 8002f12:	2301      	movs	r3, #1
 8002f14:	4652      	mov	r2, sl
 8002f16:	4649      	mov	r1, r9
 8002f18:	4638      	mov	r0, r7
 8002f1a:	47c0      	blx	r8
 8002f1c:	3001      	adds	r0, #1
 8002f1e:	d103      	bne.n	8002f28 <_printf_common+0xac>
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f28:	3501      	adds	r5, #1
 8002f2a:	e7c6      	b.n	8002eba <_printf_common+0x3e>
 8002f2c:	18e1      	adds	r1, r4, r3
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	2030      	movs	r0, #48	; 0x30
 8002f32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f36:	4422      	add	r2, r4
 8002f38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f40:	3302      	adds	r3, #2
 8002f42:	e7c7      	b.n	8002ed4 <_printf_common+0x58>
 8002f44:	2301      	movs	r3, #1
 8002f46:	4622      	mov	r2, r4
 8002f48:	4649      	mov	r1, r9
 8002f4a:	4638      	mov	r0, r7
 8002f4c:	47c0      	blx	r8
 8002f4e:	3001      	adds	r0, #1
 8002f50:	d0e6      	beq.n	8002f20 <_printf_common+0xa4>
 8002f52:	3601      	adds	r6, #1
 8002f54:	e7d9      	b.n	8002f0a <_printf_common+0x8e>
	...

08002f58 <_printf_i>:
 8002f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	4691      	mov	r9, r2
 8002f60:	7e27      	ldrb	r7, [r4, #24]
 8002f62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f64:	2f78      	cmp	r7, #120	; 0x78
 8002f66:	4680      	mov	r8, r0
 8002f68:	469a      	mov	sl, r3
 8002f6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f6e:	d807      	bhi.n	8002f80 <_printf_i+0x28>
 8002f70:	2f62      	cmp	r7, #98	; 0x62
 8002f72:	d80a      	bhi.n	8002f8a <_printf_i+0x32>
 8002f74:	2f00      	cmp	r7, #0
 8002f76:	f000 80d8 	beq.w	800312a <_printf_i+0x1d2>
 8002f7a:	2f58      	cmp	r7, #88	; 0x58
 8002f7c:	f000 80a3 	beq.w	80030c6 <_printf_i+0x16e>
 8002f80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f88:	e03a      	b.n	8003000 <_printf_i+0xa8>
 8002f8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f8e:	2b15      	cmp	r3, #21
 8002f90:	d8f6      	bhi.n	8002f80 <_printf_i+0x28>
 8002f92:	a001      	add	r0, pc, #4	; (adr r0, 8002f98 <_printf_i+0x40>)
 8002f94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002f98:	08002ff1 	.word	0x08002ff1
 8002f9c:	08003005 	.word	0x08003005
 8002fa0:	08002f81 	.word	0x08002f81
 8002fa4:	08002f81 	.word	0x08002f81
 8002fa8:	08002f81 	.word	0x08002f81
 8002fac:	08002f81 	.word	0x08002f81
 8002fb0:	08003005 	.word	0x08003005
 8002fb4:	08002f81 	.word	0x08002f81
 8002fb8:	08002f81 	.word	0x08002f81
 8002fbc:	08002f81 	.word	0x08002f81
 8002fc0:	08002f81 	.word	0x08002f81
 8002fc4:	08003111 	.word	0x08003111
 8002fc8:	08003035 	.word	0x08003035
 8002fcc:	080030f3 	.word	0x080030f3
 8002fd0:	08002f81 	.word	0x08002f81
 8002fd4:	08002f81 	.word	0x08002f81
 8002fd8:	08003133 	.word	0x08003133
 8002fdc:	08002f81 	.word	0x08002f81
 8002fe0:	08003035 	.word	0x08003035
 8002fe4:	08002f81 	.word	0x08002f81
 8002fe8:	08002f81 	.word	0x08002f81
 8002fec:	080030fb 	.word	0x080030fb
 8002ff0:	680b      	ldr	r3, [r1, #0]
 8002ff2:	1d1a      	adds	r2, r3, #4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	600a      	str	r2, [r1, #0]
 8002ff8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003000:	2301      	movs	r3, #1
 8003002:	e0a3      	b.n	800314c <_printf_i+0x1f4>
 8003004:	6825      	ldr	r5, [r4, #0]
 8003006:	6808      	ldr	r0, [r1, #0]
 8003008:	062e      	lsls	r6, r5, #24
 800300a:	f100 0304 	add.w	r3, r0, #4
 800300e:	d50a      	bpl.n	8003026 <_printf_i+0xce>
 8003010:	6805      	ldr	r5, [r0, #0]
 8003012:	600b      	str	r3, [r1, #0]
 8003014:	2d00      	cmp	r5, #0
 8003016:	da03      	bge.n	8003020 <_printf_i+0xc8>
 8003018:	232d      	movs	r3, #45	; 0x2d
 800301a:	426d      	negs	r5, r5
 800301c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003020:	485e      	ldr	r0, [pc, #376]	; (800319c <_printf_i+0x244>)
 8003022:	230a      	movs	r3, #10
 8003024:	e019      	b.n	800305a <_printf_i+0x102>
 8003026:	f015 0f40 	tst.w	r5, #64	; 0x40
 800302a:	6805      	ldr	r5, [r0, #0]
 800302c:	600b      	str	r3, [r1, #0]
 800302e:	bf18      	it	ne
 8003030:	b22d      	sxthne	r5, r5
 8003032:	e7ef      	b.n	8003014 <_printf_i+0xbc>
 8003034:	680b      	ldr	r3, [r1, #0]
 8003036:	6825      	ldr	r5, [r4, #0]
 8003038:	1d18      	adds	r0, r3, #4
 800303a:	6008      	str	r0, [r1, #0]
 800303c:	0628      	lsls	r0, r5, #24
 800303e:	d501      	bpl.n	8003044 <_printf_i+0xec>
 8003040:	681d      	ldr	r5, [r3, #0]
 8003042:	e002      	b.n	800304a <_printf_i+0xf2>
 8003044:	0669      	lsls	r1, r5, #25
 8003046:	d5fb      	bpl.n	8003040 <_printf_i+0xe8>
 8003048:	881d      	ldrh	r5, [r3, #0]
 800304a:	4854      	ldr	r0, [pc, #336]	; (800319c <_printf_i+0x244>)
 800304c:	2f6f      	cmp	r7, #111	; 0x6f
 800304e:	bf0c      	ite	eq
 8003050:	2308      	moveq	r3, #8
 8003052:	230a      	movne	r3, #10
 8003054:	2100      	movs	r1, #0
 8003056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800305a:	6866      	ldr	r6, [r4, #4]
 800305c:	60a6      	str	r6, [r4, #8]
 800305e:	2e00      	cmp	r6, #0
 8003060:	bfa2      	ittt	ge
 8003062:	6821      	ldrge	r1, [r4, #0]
 8003064:	f021 0104 	bicge.w	r1, r1, #4
 8003068:	6021      	strge	r1, [r4, #0]
 800306a:	b90d      	cbnz	r5, 8003070 <_printf_i+0x118>
 800306c:	2e00      	cmp	r6, #0
 800306e:	d04d      	beq.n	800310c <_printf_i+0x1b4>
 8003070:	4616      	mov	r6, r2
 8003072:	fbb5 f1f3 	udiv	r1, r5, r3
 8003076:	fb03 5711 	mls	r7, r3, r1, r5
 800307a:	5dc7      	ldrb	r7, [r0, r7]
 800307c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003080:	462f      	mov	r7, r5
 8003082:	42bb      	cmp	r3, r7
 8003084:	460d      	mov	r5, r1
 8003086:	d9f4      	bls.n	8003072 <_printf_i+0x11a>
 8003088:	2b08      	cmp	r3, #8
 800308a:	d10b      	bne.n	80030a4 <_printf_i+0x14c>
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	07df      	lsls	r7, r3, #31
 8003090:	d508      	bpl.n	80030a4 <_printf_i+0x14c>
 8003092:	6923      	ldr	r3, [r4, #16]
 8003094:	6861      	ldr	r1, [r4, #4]
 8003096:	4299      	cmp	r1, r3
 8003098:	bfde      	ittt	le
 800309a:	2330      	movle	r3, #48	; 0x30
 800309c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030a4:	1b92      	subs	r2, r2, r6
 80030a6:	6122      	str	r2, [r4, #16]
 80030a8:	f8cd a000 	str.w	sl, [sp]
 80030ac:	464b      	mov	r3, r9
 80030ae:	aa03      	add	r2, sp, #12
 80030b0:	4621      	mov	r1, r4
 80030b2:	4640      	mov	r0, r8
 80030b4:	f7ff fee2 	bl	8002e7c <_printf_common>
 80030b8:	3001      	adds	r0, #1
 80030ba:	d14c      	bne.n	8003156 <_printf_i+0x1fe>
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	b004      	add	sp, #16
 80030c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c6:	4835      	ldr	r0, [pc, #212]	; (800319c <_printf_i+0x244>)
 80030c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	680e      	ldr	r6, [r1, #0]
 80030d0:	061f      	lsls	r7, r3, #24
 80030d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80030d6:	600e      	str	r6, [r1, #0]
 80030d8:	d514      	bpl.n	8003104 <_printf_i+0x1ac>
 80030da:	07d9      	lsls	r1, r3, #31
 80030dc:	bf44      	itt	mi
 80030de:	f043 0320 	orrmi.w	r3, r3, #32
 80030e2:	6023      	strmi	r3, [r4, #0]
 80030e4:	b91d      	cbnz	r5, 80030ee <_printf_i+0x196>
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	f023 0320 	bic.w	r3, r3, #32
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	2310      	movs	r3, #16
 80030f0:	e7b0      	b.n	8003054 <_printf_i+0xfc>
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	f043 0320 	orr.w	r3, r3, #32
 80030f8:	6023      	str	r3, [r4, #0]
 80030fa:	2378      	movs	r3, #120	; 0x78
 80030fc:	4828      	ldr	r0, [pc, #160]	; (80031a0 <_printf_i+0x248>)
 80030fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003102:	e7e3      	b.n	80030cc <_printf_i+0x174>
 8003104:	065e      	lsls	r6, r3, #25
 8003106:	bf48      	it	mi
 8003108:	b2ad      	uxthmi	r5, r5
 800310a:	e7e6      	b.n	80030da <_printf_i+0x182>
 800310c:	4616      	mov	r6, r2
 800310e:	e7bb      	b.n	8003088 <_printf_i+0x130>
 8003110:	680b      	ldr	r3, [r1, #0]
 8003112:	6826      	ldr	r6, [r4, #0]
 8003114:	6960      	ldr	r0, [r4, #20]
 8003116:	1d1d      	adds	r5, r3, #4
 8003118:	600d      	str	r5, [r1, #0]
 800311a:	0635      	lsls	r5, r6, #24
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	d501      	bpl.n	8003124 <_printf_i+0x1cc>
 8003120:	6018      	str	r0, [r3, #0]
 8003122:	e002      	b.n	800312a <_printf_i+0x1d2>
 8003124:	0671      	lsls	r1, r6, #25
 8003126:	d5fb      	bpl.n	8003120 <_printf_i+0x1c8>
 8003128:	8018      	strh	r0, [r3, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	6123      	str	r3, [r4, #16]
 800312e:	4616      	mov	r6, r2
 8003130:	e7ba      	b.n	80030a8 <_printf_i+0x150>
 8003132:	680b      	ldr	r3, [r1, #0]
 8003134:	1d1a      	adds	r2, r3, #4
 8003136:	600a      	str	r2, [r1, #0]
 8003138:	681e      	ldr	r6, [r3, #0]
 800313a:	6862      	ldr	r2, [r4, #4]
 800313c:	2100      	movs	r1, #0
 800313e:	4630      	mov	r0, r6
 8003140:	f7fd f84e 	bl	80001e0 <memchr>
 8003144:	b108      	cbz	r0, 800314a <_printf_i+0x1f2>
 8003146:	1b80      	subs	r0, r0, r6
 8003148:	6060      	str	r0, [r4, #4]
 800314a:	6863      	ldr	r3, [r4, #4]
 800314c:	6123      	str	r3, [r4, #16]
 800314e:	2300      	movs	r3, #0
 8003150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003154:	e7a8      	b.n	80030a8 <_printf_i+0x150>
 8003156:	6923      	ldr	r3, [r4, #16]
 8003158:	4632      	mov	r2, r6
 800315a:	4649      	mov	r1, r9
 800315c:	4640      	mov	r0, r8
 800315e:	47d0      	blx	sl
 8003160:	3001      	adds	r0, #1
 8003162:	d0ab      	beq.n	80030bc <_printf_i+0x164>
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	079b      	lsls	r3, r3, #30
 8003168:	d413      	bmi.n	8003192 <_printf_i+0x23a>
 800316a:	68e0      	ldr	r0, [r4, #12]
 800316c:	9b03      	ldr	r3, [sp, #12]
 800316e:	4298      	cmp	r0, r3
 8003170:	bfb8      	it	lt
 8003172:	4618      	movlt	r0, r3
 8003174:	e7a4      	b.n	80030c0 <_printf_i+0x168>
 8003176:	2301      	movs	r3, #1
 8003178:	4632      	mov	r2, r6
 800317a:	4649      	mov	r1, r9
 800317c:	4640      	mov	r0, r8
 800317e:	47d0      	blx	sl
 8003180:	3001      	adds	r0, #1
 8003182:	d09b      	beq.n	80030bc <_printf_i+0x164>
 8003184:	3501      	adds	r5, #1
 8003186:	68e3      	ldr	r3, [r4, #12]
 8003188:	9903      	ldr	r1, [sp, #12]
 800318a:	1a5b      	subs	r3, r3, r1
 800318c:	42ab      	cmp	r3, r5
 800318e:	dcf2      	bgt.n	8003176 <_printf_i+0x21e>
 8003190:	e7eb      	b.n	800316a <_printf_i+0x212>
 8003192:	2500      	movs	r5, #0
 8003194:	f104 0619 	add.w	r6, r4, #25
 8003198:	e7f5      	b.n	8003186 <_printf_i+0x22e>
 800319a:	bf00      	nop
 800319c:	0800342d 	.word	0x0800342d
 80031a0:	0800343e 	.word	0x0800343e

080031a4 <memcpy>:
 80031a4:	440a      	add	r2, r1
 80031a6:	4291      	cmp	r1, r2
 80031a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80031ac:	d100      	bne.n	80031b0 <memcpy+0xc>
 80031ae:	4770      	bx	lr
 80031b0:	b510      	push	{r4, lr}
 80031b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031ba:	4291      	cmp	r1, r2
 80031bc:	d1f9      	bne.n	80031b2 <memcpy+0xe>
 80031be:	bd10      	pop	{r4, pc}

080031c0 <memmove>:
 80031c0:	4288      	cmp	r0, r1
 80031c2:	b510      	push	{r4, lr}
 80031c4:	eb01 0402 	add.w	r4, r1, r2
 80031c8:	d902      	bls.n	80031d0 <memmove+0x10>
 80031ca:	4284      	cmp	r4, r0
 80031cc:	4623      	mov	r3, r4
 80031ce:	d807      	bhi.n	80031e0 <memmove+0x20>
 80031d0:	1e43      	subs	r3, r0, #1
 80031d2:	42a1      	cmp	r1, r4
 80031d4:	d008      	beq.n	80031e8 <memmove+0x28>
 80031d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031de:	e7f8      	b.n	80031d2 <memmove+0x12>
 80031e0:	4402      	add	r2, r0
 80031e2:	4601      	mov	r1, r0
 80031e4:	428a      	cmp	r2, r1
 80031e6:	d100      	bne.n	80031ea <memmove+0x2a>
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031f2:	e7f7      	b.n	80031e4 <memmove+0x24>

080031f4 <_free_r>:
 80031f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80031f6:	2900      	cmp	r1, #0
 80031f8:	d048      	beq.n	800328c <_free_r+0x98>
 80031fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031fe:	9001      	str	r0, [sp, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	f1a1 0404 	sub.w	r4, r1, #4
 8003206:	bfb8      	it	lt
 8003208:	18e4      	addlt	r4, r4, r3
 800320a:	f000 f8d3 	bl	80033b4 <__malloc_lock>
 800320e:	4a20      	ldr	r2, [pc, #128]	; (8003290 <_free_r+0x9c>)
 8003210:	9801      	ldr	r0, [sp, #4]
 8003212:	6813      	ldr	r3, [r2, #0]
 8003214:	4615      	mov	r5, r2
 8003216:	b933      	cbnz	r3, 8003226 <_free_r+0x32>
 8003218:	6063      	str	r3, [r4, #4]
 800321a:	6014      	str	r4, [r2, #0]
 800321c:	b003      	add	sp, #12
 800321e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003222:	f000 b8cd 	b.w	80033c0 <__malloc_unlock>
 8003226:	42a3      	cmp	r3, r4
 8003228:	d90b      	bls.n	8003242 <_free_r+0x4e>
 800322a:	6821      	ldr	r1, [r4, #0]
 800322c:	1862      	adds	r2, r4, r1
 800322e:	4293      	cmp	r3, r2
 8003230:	bf04      	itt	eq
 8003232:	681a      	ldreq	r2, [r3, #0]
 8003234:	685b      	ldreq	r3, [r3, #4]
 8003236:	6063      	str	r3, [r4, #4]
 8003238:	bf04      	itt	eq
 800323a:	1852      	addeq	r2, r2, r1
 800323c:	6022      	streq	r2, [r4, #0]
 800323e:	602c      	str	r4, [r5, #0]
 8003240:	e7ec      	b.n	800321c <_free_r+0x28>
 8003242:	461a      	mov	r2, r3
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	b10b      	cbz	r3, 800324c <_free_r+0x58>
 8003248:	42a3      	cmp	r3, r4
 800324a:	d9fa      	bls.n	8003242 <_free_r+0x4e>
 800324c:	6811      	ldr	r1, [r2, #0]
 800324e:	1855      	adds	r5, r2, r1
 8003250:	42a5      	cmp	r5, r4
 8003252:	d10b      	bne.n	800326c <_free_r+0x78>
 8003254:	6824      	ldr	r4, [r4, #0]
 8003256:	4421      	add	r1, r4
 8003258:	1854      	adds	r4, r2, r1
 800325a:	42a3      	cmp	r3, r4
 800325c:	6011      	str	r1, [r2, #0]
 800325e:	d1dd      	bne.n	800321c <_free_r+0x28>
 8003260:	681c      	ldr	r4, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	6053      	str	r3, [r2, #4]
 8003266:	4421      	add	r1, r4
 8003268:	6011      	str	r1, [r2, #0]
 800326a:	e7d7      	b.n	800321c <_free_r+0x28>
 800326c:	d902      	bls.n	8003274 <_free_r+0x80>
 800326e:	230c      	movs	r3, #12
 8003270:	6003      	str	r3, [r0, #0]
 8003272:	e7d3      	b.n	800321c <_free_r+0x28>
 8003274:	6825      	ldr	r5, [r4, #0]
 8003276:	1961      	adds	r1, r4, r5
 8003278:	428b      	cmp	r3, r1
 800327a:	bf04      	itt	eq
 800327c:	6819      	ldreq	r1, [r3, #0]
 800327e:	685b      	ldreq	r3, [r3, #4]
 8003280:	6063      	str	r3, [r4, #4]
 8003282:	bf04      	itt	eq
 8003284:	1949      	addeq	r1, r1, r5
 8003286:	6021      	streq	r1, [r4, #0]
 8003288:	6054      	str	r4, [r2, #4]
 800328a:	e7c7      	b.n	800321c <_free_r+0x28>
 800328c:	b003      	add	sp, #12
 800328e:	bd30      	pop	{r4, r5, pc}
 8003290:	20000090 	.word	0x20000090

08003294 <_malloc_r>:
 8003294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003296:	1ccd      	adds	r5, r1, #3
 8003298:	f025 0503 	bic.w	r5, r5, #3
 800329c:	3508      	adds	r5, #8
 800329e:	2d0c      	cmp	r5, #12
 80032a0:	bf38      	it	cc
 80032a2:	250c      	movcc	r5, #12
 80032a4:	2d00      	cmp	r5, #0
 80032a6:	4606      	mov	r6, r0
 80032a8:	db01      	blt.n	80032ae <_malloc_r+0x1a>
 80032aa:	42a9      	cmp	r1, r5
 80032ac:	d903      	bls.n	80032b6 <_malloc_r+0x22>
 80032ae:	230c      	movs	r3, #12
 80032b0:	6033      	str	r3, [r6, #0]
 80032b2:	2000      	movs	r0, #0
 80032b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032b6:	f000 f87d 	bl	80033b4 <__malloc_lock>
 80032ba:	4921      	ldr	r1, [pc, #132]	; (8003340 <_malloc_r+0xac>)
 80032bc:	680a      	ldr	r2, [r1, #0]
 80032be:	4614      	mov	r4, r2
 80032c0:	b99c      	cbnz	r4, 80032ea <_malloc_r+0x56>
 80032c2:	4f20      	ldr	r7, [pc, #128]	; (8003344 <_malloc_r+0xb0>)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	b923      	cbnz	r3, 80032d2 <_malloc_r+0x3e>
 80032c8:	4621      	mov	r1, r4
 80032ca:	4630      	mov	r0, r6
 80032cc:	f000 f862 	bl	8003394 <_sbrk_r>
 80032d0:	6038      	str	r0, [r7, #0]
 80032d2:	4629      	mov	r1, r5
 80032d4:	4630      	mov	r0, r6
 80032d6:	f000 f85d 	bl	8003394 <_sbrk_r>
 80032da:	1c43      	adds	r3, r0, #1
 80032dc:	d123      	bne.n	8003326 <_malloc_r+0x92>
 80032de:	230c      	movs	r3, #12
 80032e0:	6033      	str	r3, [r6, #0]
 80032e2:	4630      	mov	r0, r6
 80032e4:	f000 f86c 	bl	80033c0 <__malloc_unlock>
 80032e8:	e7e3      	b.n	80032b2 <_malloc_r+0x1e>
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	1b5b      	subs	r3, r3, r5
 80032ee:	d417      	bmi.n	8003320 <_malloc_r+0x8c>
 80032f0:	2b0b      	cmp	r3, #11
 80032f2:	d903      	bls.n	80032fc <_malloc_r+0x68>
 80032f4:	6023      	str	r3, [r4, #0]
 80032f6:	441c      	add	r4, r3
 80032f8:	6025      	str	r5, [r4, #0]
 80032fa:	e004      	b.n	8003306 <_malloc_r+0x72>
 80032fc:	6863      	ldr	r3, [r4, #4]
 80032fe:	42a2      	cmp	r2, r4
 8003300:	bf0c      	ite	eq
 8003302:	600b      	streq	r3, [r1, #0]
 8003304:	6053      	strne	r3, [r2, #4]
 8003306:	4630      	mov	r0, r6
 8003308:	f000 f85a 	bl	80033c0 <__malloc_unlock>
 800330c:	f104 000b 	add.w	r0, r4, #11
 8003310:	1d23      	adds	r3, r4, #4
 8003312:	f020 0007 	bic.w	r0, r0, #7
 8003316:	1ac2      	subs	r2, r0, r3
 8003318:	d0cc      	beq.n	80032b4 <_malloc_r+0x20>
 800331a:	1a1b      	subs	r3, r3, r0
 800331c:	50a3      	str	r3, [r4, r2]
 800331e:	e7c9      	b.n	80032b4 <_malloc_r+0x20>
 8003320:	4622      	mov	r2, r4
 8003322:	6864      	ldr	r4, [r4, #4]
 8003324:	e7cc      	b.n	80032c0 <_malloc_r+0x2c>
 8003326:	1cc4      	adds	r4, r0, #3
 8003328:	f024 0403 	bic.w	r4, r4, #3
 800332c:	42a0      	cmp	r0, r4
 800332e:	d0e3      	beq.n	80032f8 <_malloc_r+0x64>
 8003330:	1a21      	subs	r1, r4, r0
 8003332:	4630      	mov	r0, r6
 8003334:	f000 f82e 	bl	8003394 <_sbrk_r>
 8003338:	3001      	adds	r0, #1
 800333a:	d1dd      	bne.n	80032f8 <_malloc_r+0x64>
 800333c:	e7cf      	b.n	80032de <_malloc_r+0x4a>
 800333e:	bf00      	nop
 8003340:	20000090 	.word	0x20000090
 8003344:	20000094 	.word	0x20000094

08003348 <_realloc_r>:
 8003348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334a:	4607      	mov	r7, r0
 800334c:	4614      	mov	r4, r2
 800334e:	460e      	mov	r6, r1
 8003350:	b921      	cbnz	r1, 800335c <_realloc_r+0x14>
 8003352:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003356:	4611      	mov	r1, r2
 8003358:	f7ff bf9c 	b.w	8003294 <_malloc_r>
 800335c:	b922      	cbnz	r2, 8003368 <_realloc_r+0x20>
 800335e:	f7ff ff49 	bl	80031f4 <_free_r>
 8003362:	4625      	mov	r5, r4
 8003364:	4628      	mov	r0, r5
 8003366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003368:	f000 f830 	bl	80033cc <_malloc_usable_size_r>
 800336c:	42a0      	cmp	r0, r4
 800336e:	d20f      	bcs.n	8003390 <_realloc_r+0x48>
 8003370:	4621      	mov	r1, r4
 8003372:	4638      	mov	r0, r7
 8003374:	f7ff ff8e 	bl	8003294 <_malloc_r>
 8003378:	4605      	mov	r5, r0
 800337a:	2800      	cmp	r0, #0
 800337c:	d0f2      	beq.n	8003364 <_realloc_r+0x1c>
 800337e:	4631      	mov	r1, r6
 8003380:	4622      	mov	r2, r4
 8003382:	f7ff ff0f 	bl	80031a4 <memcpy>
 8003386:	4631      	mov	r1, r6
 8003388:	4638      	mov	r0, r7
 800338a:	f7ff ff33 	bl	80031f4 <_free_r>
 800338e:	e7e9      	b.n	8003364 <_realloc_r+0x1c>
 8003390:	4635      	mov	r5, r6
 8003392:	e7e7      	b.n	8003364 <_realloc_r+0x1c>

08003394 <_sbrk_r>:
 8003394:	b538      	push	{r3, r4, r5, lr}
 8003396:	4d06      	ldr	r5, [pc, #24]	; (80033b0 <_sbrk_r+0x1c>)
 8003398:	2300      	movs	r3, #0
 800339a:	4604      	mov	r4, r0
 800339c:	4608      	mov	r0, r1
 800339e:	602b      	str	r3, [r5, #0]
 80033a0:	f7fd fb42 	bl	8000a28 <_sbrk>
 80033a4:	1c43      	adds	r3, r0, #1
 80033a6:	d102      	bne.n	80033ae <_sbrk_r+0x1a>
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	b103      	cbz	r3, 80033ae <_sbrk_r+0x1a>
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	bd38      	pop	{r3, r4, r5, pc}
 80033b0:	20000138 	.word	0x20000138

080033b4 <__malloc_lock>:
 80033b4:	4801      	ldr	r0, [pc, #4]	; (80033bc <__malloc_lock+0x8>)
 80033b6:	f000 b811 	b.w	80033dc <__retarget_lock_acquire_recursive>
 80033ba:	bf00      	nop
 80033bc:	20000140 	.word	0x20000140

080033c0 <__malloc_unlock>:
 80033c0:	4801      	ldr	r0, [pc, #4]	; (80033c8 <__malloc_unlock+0x8>)
 80033c2:	f000 b80c 	b.w	80033de <__retarget_lock_release_recursive>
 80033c6:	bf00      	nop
 80033c8:	20000140 	.word	0x20000140

080033cc <_malloc_usable_size_r>:
 80033cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033d0:	1f18      	subs	r0, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	bfbc      	itt	lt
 80033d6:	580b      	ldrlt	r3, [r1, r0]
 80033d8:	18c0      	addlt	r0, r0, r3
 80033da:	4770      	bx	lr

080033dc <__retarget_lock_acquire_recursive>:
 80033dc:	4770      	bx	lr

080033de <__retarget_lock_release_recursive>:
 80033de:	4770      	bx	lr

080033e0 <_init>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	bf00      	nop
 80033e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e6:	bc08      	pop	{r3}
 80033e8:	469e      	mov	lr, r3
 80033ea:	4770      	bx	lr

080033ec <_fini>:
 80033ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ee:	bf00      	nop
 80033f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f2:	bc08      	pop	{r3}
 80033f4:	469e      	mov	lr, r3
 80033f6:	4770      	bx	lr
